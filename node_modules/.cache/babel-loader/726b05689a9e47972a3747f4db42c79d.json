{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\auth\\\\RegisterContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport RegisterForm from '../../components/auth/RegisterForm';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterContainer = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError\n  } = useSelector(_ref => {\n    let {\n      auth\n    } = _ref;\n    return {\n      form: auth.register,\n      auth: auth.auth,\n      authError: auth.authError\n    };\n  });\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form;\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      });\n      return;\n    }\n\n    dispatch(register({\n      username,\n      password\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(RegisterForm, {\n    onChange: onChange,\n    onSubmit: onSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\n_s(RegisterContainer, \"lZuzCQ5tP2bREaCZacwv4C4biyA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RegisterContainer;\nexport default RegisterContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/auth/RegisterContainer.js"],"names":["React","useState","useDispatch","useSelector","RegisterForm","changeField","initializeForm","register","RegisterContainer","error","setError","dispatch","form","auth","authError","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,QAAtC,QAAsD,oBAAtD;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,MAA4BX,WAAW,CAAC;AAAA,QAAC;AAAEU,MAAAA;AAAF,KAAD;AAAA,WAAe;AAC3DD,MAAAA,IAAI,EAAEC,IAAI,CAACN,QADgD;AAE3DM,MAAAA,IAAI,EAAEA,IAAI,CAACA,IAFgD;AAG3DC,MAAAA,SAAS,EAAED,IAAI,CAACC;AAH2C,KAAf;AAAA,GAAD,CAA7C;;AAMA,QAAMC,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,CAAC,CAACG,MAA1B;AACAR,IAAAA,QAAQ,CACNN,WAAW,CAAC;AACVO,MAAAA,IAAI,EAAE,UADI;AAEVQ,MAAAA,GAAG,EAAEF,IAFK;AAGVD,MAAAA;AAHU,KAAD,CADL,CAAR;AAOD,GATD;;AAUA,QAAMI,QAAQ,GAAIL,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACM,cAAF;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAA0Cb,IAAhD;;AACA,QAAI,CAACW,QAAD,EAAWC,QAAX,EAAqBC,eAArB,EAAsCC,QAAtC,CAA+C,EAA/C,CAAJ,EAAwD;AACtDhB,MAAAA,QAAQ,CAAC,eAAD,CAAR;AACA;AACD;;AACD,QAAIc,QAAQ,KAAKC,eAAjB,EAAkC;AAChCf,MAAAA,QAAQ,CAAC,kBAAD,CAAR;AACAL,MAAAA,WAAW,CAAC;AAAEO,QAAAA,IAAI,EAAE,UAAR;AAAoBQ,QAAAA,GAAG,EAAE,UAAzB;AAAqCH,QAAAA,KAAK,EAAE;AAA5C,OAAD,CAAX;AACAZ,MAAAA,WAAW,CAAC;AAAEO,QAAAA,IAAI,EAAE,UAAR;AAAoBQ,QAAAA,GAAG,EAAE,iBAAzB;AAA4CH,QAAAA,KAAK,EAAE;AAAnD,OAAD,CAAX;AACA;AACD;;AAEDN,IAAAA,QAAQ,CAACJ,QAAQ,CAAC;AAAEgB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,CAAT,CAAR;AACD,GAfD;;AAgBA,sBAAO,QAAC,YAAD;AAAc,IAAA,QAAQ,EAAET,QAAxB;AAAkC,IAAA,QAAQ,EAAEM;AAA5C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApCD;;GAAMb,iB;UAEaN,W,EACiBC,W;;;KAH9BK,iB;AAsCN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport RegisterForm from '../../components/auth/RegisterForm';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\n\r\nconst RegisterContainer = () => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError } = useSelector(({ auth }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n  }));\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요');\r\n      return;\r\n    }\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({ form: 'register', key: 'password', value: '' });\r\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\r\n      return;\r\n    }\r\n\r\n    dispatch(register({ username, password }));\r\n  };\r\n  return <RegisterForm onChange={onChange} onSubmit={onSubmit} />;\r\n};\r\n\r\nexport default RegisterContainer;\r\n"]},"metadata":{},"sourceType":"module"}