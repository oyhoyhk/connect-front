{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\nexport const initializeOther = createAction(INITIALIZE_OTHER);\nexport const sendChatting = createAction(SEND_CHATTING);\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\nconst initialState = {\n  other: null,\n  logs: {},\n  chat: true\n};\nexport default handleActions({\n  [SET_OTHER_TO_CHAT]: (state, _ref) => {\n    let {\n      payload: other\n    } = _ref;\n    return { ...state,\n      other\n    };\n  },\n  [INITIALIZE_OTHER]: state => ({ ...state,\n    other: null\n  }),\n  [SEND_CHATTING]: (state, _ref2) => {\n    let {\n      payload: {\n        receiver,\n        message,\n        time\n      }\n    } = _ref2;\n    if (!state.logs[receiver]) state.logs[receiver] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [receiver]: [...state.logs[receiver], {\n          message,\n          type: 'send',\n          time\n        }]\n      }\n    };\n  },\n  [RECEIVE_CHATTING]: (state, _ref3) => {\n    let {\n      payload: {\n        sender,\n        message,\n        time\n      }\n    } = _ref3;\n    if (!state.logs[sender]) state.logs[sender] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [sender]: [...state.logs[sender], {\n          message,\n          sender,\n          type: 'received',\n          time\n        }]\n      }\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_CHATTING","RECEIVE_CHATTING","setOtherToChat","initializeOther","sendChatting","receiveChatting","initialState","other","logs","chat","state","payload","receiver","message","time","type","sender"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAIA,MAAMC,iBAAiB,GAAG,4BAA1B;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AACA,MAAMC,aAAa,GAAG,wBAAtB;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AAEA,OAAO,MAAMC,cAAc,GAAGT,YAAY,CAACK,iBAAD,CAAnC;AACP,OAAO,MAAMK,eAAe,GAAGV,YAAY,CAACM,gBAAD,CAApC;AACP,OAAO,MAAMK,YAAY,GAAGX,YAAY,CAACO,aAAD,CAAjC;AACP,OAAO,MAAMK,eAAe,GAAGZ,YAAY,CAACQ,gBAAD,CAApC;AAEP,MAAMK,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,eAAef,aAAa,CAC1B;AACE,GAACI,iBAAD,GAAqB,CAACY,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEJ;AAAX,KAAR;AAAA,WAAgC,EACnD,GAAGG,KADgD;AAEnDH,MAAAA;AAFmD,KAAhC;AAAA,GADvB;AAKE,GAACR,gBAAD,GAAqBW,KAAD,KAAY,EAC9B,GAAGA,KAD2B;AAE9BH,IAAAA,KAAK,EAAE;AAFuB,GAAZ,CALtB;AASE,GAACP,aAAD,GAAiB,CAACU,KAAD,YAAqD;AAAA,QAA7C;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBC,QAAAA;AAArB;AAAX,KAA6C;AACpE,QAAI,CAACJ,KAAK,CAACF,IAAN,CAAWI,QAAX,CAAL,EAA2BF,KAAK,CAACF,IAAN,CAAWI,QAAX,IAAuB,EAAvB;AAE3B,WAAO,EACL,GAAGF,KADE;AAELF,MAAAA,IAAI,EAAE,EACJ,GAAGE,KAAK,CAACF,IADL;AAEJ,SAACI,QAAD,GAAY,CACV,GAAGF,KAAK,CAACF,IAAN,CAAWI,QAAX,CADO,EAEV;AAAEC,UAAAA,OAAF;AAAWE,UAAAA,IAAI,EAAE,MAAjB;AAAyBD,UAAAA;AAAzB,SAFU;AAFR;AAFD,KAAP;AAUD,GAtBH;AAuBE,GAACb,gBAAD,GAAoB,CAACS,KAAD,YAAmD;AAAA,QAA3C;AAAEC,MAAAA,OAAO,EAAE;AAAEK,QAAAA,MAAF;AAAUH,QAAAA,OAAV;AAAmBC,QAAAA;AAAnB;AAAX,KAA2C;AACrE,QAAI,CAACJ,KAAK,CAACF,IAAN,CAAWQ,MAAX,CAAL,EAAyBN,KAAK,CAACF,IAAN,CAAWQ,MAAX,IAAqB,EAArB;AAEzB,WAAO,EACL,GAAGN,KADE;AAELF,MAAAA,IAAI,EAAE,EACJ,GAAGE,KAAK,CAACF,IADL;AAEJ,SAACQ,MAAD,GAAU,CACR,GAAGN,KAAK,CAACF,IAAN,CAAWQ,MAAX,CADK,EAER;AAAEH,UAAAA,OAAF;AAAWG,UAAAA,MAAX;AAAmBD,UAAAA,IAAI,EAAE,UAAzB;AAAqCD,UAAAA;AAArC,SAFQ;AAFN;AAFD,KAAP;AAUD;AApCH,CAD0B,EAuC1BR,YAvC0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\r\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendChatting = createAction(SEND_CHATTING);\r\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: {},\r\n  chat: true,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_CHATTING]: (state, { payload: { receiver, message, time } }) => {\r\n      if (!state.logs[receiver]) state.logs[receiver] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [receiver]: [\r\n            ...state.logs[receiver],\r\n            { message, type: 'send', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    [RECEIVE_CHATTING]: (state, { payload: { sender, message, time } }) => {\r\n      if (!state.logs[sender]) state.logs[sender] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [sender]: [\r\n            ...state.logs[sender],\r\n            { message, sender, type: 'received', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}