{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as chattingAPI from '../lib/api/chatting';\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\nconst [REQUEST_CHATTING_LOGS, REQUEST_CHATTING_LOGS_SUCCESS, REQUEST_CHATTING_LOGS_FAILURE] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\nexport const initializeOther = createAction(INITIALIZE_OTHER);\nexport const sendChatting = createAction(SEND_CHATTING);\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\nexport const openChatting = createAction(OPEN_CHATTING);\nexport const closeChatting = createAction(CLOSE_CHATTING);\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\nconst requestChattingLogsSaga = createRequestSaga(REQUEST_CHATTING_LOGS, chattingAPI.requestChattingLogs);\nexport function* chattingSaga() {\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\n}\nconst initialState = {\n  other: null,\n  logs: {},\n  chat: false\n};\nexport default handleActions({\n  [SET_OTHER_TO_CHAT]: (state, _ref) => {\n    let {\n      payload: other\n    } = _ref;\n    return { ...state,\n      other\n    };\n  },\n  [INITIALIZE_OTHER]: state => ({ ...state,\n    other: null\n  }),\n  [SEND_CHATTING]: (state, _ref2) => {\n    let {\n      payload: {\n        receiver,\n        message,\n        time\n      }\n    } = _ref2;\n    if (!state.logs[receiver]) state.logs[receiver] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [receiver]: [...state.logs[receiver], {\n          message,\n          type: 'send',\n          time\n        }]\n      }\n    };\n  },\n  [RECEIVE_CHATTING]: (state, _ref3) => {\n    let {\n      payload: {\n        sender,\n        message,\n        time\n      }\n    } = _ref3;\n    if (!state.logs[sender]) state.logs[sender] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [sender]: [...state.logs[sender], {\n          message,\n          sender,\n          type: 'received',\n          time\n        }]\n      }\n    };\n  },\n  [OPEN_CHATTING]: state => ({ ...state,\n    chat: true\n  }),\n  [CLOSE_CHATTING]: state => ({ ...state,\n    chat: false,\n    other: null,\n    logs: {}\n  }),\n  [REQUEST_CHATTING_LOGS_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: {\n        other,\n        list\n      }\n    } = _ref4;\n    return { ...state,\n      logs: { ...state.logs,\n        [other]: [...list]\n      }\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","chattingAPI","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_CHATTING","RECEIVE_CHATTING","OPEN_CHATTING","CLOSE_CHATTING","REQUEST_CHATTING_LOGS","REQUEST_CHATTING_LOGS_SUCCESS","REQUEST_CHATTING_LOGS_FAILURE","setOtherToChat","initializeOther","sendChatting","receiveChatting","openChatting","closeChatting","requestChattingLogs","requestChattingLogsSaga","chattingSaga","initialState","other","logs","chat","state","payload","receiver","message","time","type","sender","list"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as chattingAPI from '../lib/api/chatting';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\r\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\r\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\r\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\r\nconst [\r\n  REQUEST_CHATTING_LOGS,\r\n  REQUEST_CHATTING_LOGS_SUCCESS,\r\n  REQUEST_CHATTING_LOGS_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendChatting = createAction(SEND_CHATTING);\r\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\r\nexport const openChatting = createAction(OPEN_CHATTING);\r\nexport const closeChatting = createAction(CLOSE_CHATTING);\r\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\r\nconst requestChattingLogsSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LOGS,\r\n  chattingAPI.requestChattingLogs,\r\n);\r\n\r\nexport function* chattingSaga() {\r\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: {},\r\n  chat: false,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_CHATTING]: (state, { payload: { receiver, message, time } }) => {\r\n      if (!state.logs[receiver]) state.logs[receiver] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [receiver]: [\r\n            ...state.logs[receiver],\r\n            { message, type: 'send', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    [RECEIVE_CHATTING]: (state, { payload: { sender, message, time } }) => {\r\n      if (!state.logs[sender]) state.logs[sender] = [];\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [sender]: [\r\n            ...state.logs[sender],\r\n            { message, sender, type: 'received', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    [OPEN_CHATTING]: (state) => ({ ...state, chat: true }),\r\n    [CLOSE_CHATTING]: (state) => ({\r\n      ...state,\r\n      chat: false,\r\n      other: null,\r\n      logs: {},\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_SUCCESS]: (state, { payload: { other, list } }) => ({\r\n      ...state,\r\n      logs: { ...state.logs, [other]: [...list] },\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}