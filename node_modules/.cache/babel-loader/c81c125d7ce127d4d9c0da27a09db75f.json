{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\nconst SEND_MESSAGE = 'chatting/SEND_MESSAGE';\nconst RECEIVE_MESSAGE = 'chatting/RECEIVE_MESSAGE';\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\nexport const initializeOther = createAction(INITIALIZE_OTHER);\nexport const sendMessage = createAction(SEND_MESSAGE);\nexport const receiveMessage = createAction(RECEIVE_MESSAGE);\nconst initialState = {\n  other: null,\n  logs: {}\n};\nexport default handleActions({\n  [SET_OTHER_TO_CHAT]: (state, _ref) => {\n    let {\n      payload: other\n    } = _ref;\n    return { ...state,\n      other\n    };\n  },\n  [INITIALIZE_OTHER]: state => ({ ...state,\n    other: null\n  }),\n  [SEND_MESSAGE]: (state, _ref2) => {\n    let {\n      payload: {\n        receiver,\n        message\n      }\n    } = _ref2;\n    if (!state.logs[receiver]) state.logs[receiver] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [receiver]: [...state.logs[receiver], {\n          message,\n          type: 'send'\n        }]\n      }\n    };\n  },\n  [RECEIVE_MESSAGE]: (state, _ref3) => {\n    let {\n      payload: {\n        sender,\n        message\n      }\n    } = _ref3;\n    if (!state.logs[sender]) state.logs[sender] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [sender]: [...state.logs[sender], {\n          message,\n          sender,\n          type: 'received'\n        }]\n      }\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_MESSAGE","RECEIVE_MESSAGE","setOtherToChat","initializeOther","sendMessage","receiveMessage","initialState","other","logs","state","payload","receiver","message","type","sender"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAIA,MAAMC,iBAAiB,GAAG,4BAA1B;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AACA,MAAMC,YAAY,GAAG,uBAArB;AACA,MAAMC,eAAe,GAAG,0BAAxB;AAEA,OAAO,MAAMC,cAAc,GAAGT,YAAY,CAACK,iBAAD,CAAnC;AACP,OAAO,MAAMK,eAAe,GAAGV,YAAY,CAACM,gBAAD,CAApC;AACP,OAAO,MAAMK,WAAW,GAAGX,YAAY,CAACO,YAAD,CAAhC;AACP,OAAO,MAAMK,cAAc,GAAGZ,YAAY,CAACQ,eAAD,CAAnC;AAEP,MAAMK,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAed,aAAa,CAC1B;AACE,GAACI,iBAAD,GAAqB,CAACW,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEH;AAAX,KAAR;AAAA,WAAgC,EACnD,GAAGE,KADgD;AAEnDF,MAAAA;AAFmD,KAAhC;AAAA,GADvB;AAKE,GAACR,gBAAD,GAAqBU,KAAD,KAAY,EAC9B,GAAGA,KAD2B;AAE9BF,IAAAA,KAAK,EAAE;AAFuB,GAAZ,CALtB;AASE,GAACP,YAAD,GAAgB,CAACS,KAAD,YAA+C;AAAA,QAAvC;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAAX,KAAuC;AAC7D,QAAI,CAACH,KAAK,CAACD,IAAN,CAAWG,QAAX,CAAL,EAA2BF,KAAK,CAACD,IAAN,CAAWG,QAAX,IAAuB,EAAvB;AAE3B,WAAO,EACL,GAAGF,KADE;AAELD,MAAAA,IAAI,EAAE,EACJ,GAAGC,KAAK,CAACD,IADL;AAEJ,SAACG,QAAD,GAAY,CAAC,GAAGF,KAAK,CAACD,IAAN,CAAWG,QAAX,CAAJ,EAA0B;AAAEC,UAAAA,OAAF;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAA1B;AAFR;AAFD,KAAP;AAOD,GAnBH;AAoBE,GAACZ,eAAD,GAAmB,CAACQ,KAAD,YAA6C;AAAA,QAArC;AAAEC,MAAAA,OAAO,EAAE;AAAEI,QAAAA,MAAF;AAAUF,QAAAA;AAAV;AAAX,KAAqC;AAC9D,QAAI,CAACH,KAAK,CAACD,IAAN,CAAWM,MAAX,CAAL,EAAyBL,KAAK,CAACD,IAAN,CAAWM,MAAX,IAAqB,EAArB;AAEzB,WAAO,EACL,GAAGL,KADE;AAELD,MAAAA,IAAI,EAAE,EACJ,GAAGC,KAAK,CAACD,IADL;AAEJ,SAACM,MAAD,GAAU,CACR,GAAGL,KAAK,CAACD,IAAN,CAAWM,MAAX,CADK,EAER;AAAEF,UAAAA,OAAF;AAAWE,UAAAA,MAAX;AAAmBD,UAAAA,IAAI,EAAE;AAAzB,SAFQ;AAFN;AAFD,KAAP;AAUD;AAjCH,CAD0B,EAoC1BP,YApC0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_MESSAGE = 'chatting/SEND_MESSAGE';\r\nconst RECEIVE_MESSAGE = 'chatting/RECEIVE_MESSAGE';\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendMessage = createAction(SEND_MESSAGE);\r\nexport const receiveMessage = createAction(RECEIVE_MESSAGE);\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: {},\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_MESSAGE]: (state, { payload: { receiver, message } }) => {\r\n      if (!state.logs[receiver]) state.logs[receiver] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [receiver]: [...state.logs[receiver], { message, type: 'send' }],\r\n        },\r\n      };\r\n    },\r\n    [RECEIVE_MESSAGE]: (state, { payload: { sender, message } }) => {\r\n      if (!state.logs[sender]) state.logs[sender] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [sender]: [\r\n            ...state.logs[sender],\r\n            { message, sender, type: 'received' },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}