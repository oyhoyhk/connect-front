{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as chattingAPI from '../lib/api/chatting';\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\nconst START_LOADING = 'chatting/START_LOADING';\nconst [REQUEST_CHATTING_LOGS, REQUEST_CHATTING_LOGS_SUCCESS, REQUEST_CHATTING_LOGS_FAILURE] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\nconst [REQUEST_CHATTING_LIST, REQUEST_CHATTING_LIST_SUCCESS, REQUEST_CHATTING_LIST_FAILURE] = createRequestActionTypes('chatting/REQUEST_CHATTING_LIST');\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\nexport const initializeOther = createAction(INITIALIZE_OTHER);\nexport const sendChatting = createAction(SEND_CHATTING);\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\nexport const openChatting = createAction(OPEN_CHATTING);\nexport const closeChatting = createAction(CLOSE_CHATTING);\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\nexport const requestChattingList = createAction(REQUEST_CHATTING_LIST);\nexport const startLoading = createAction(START_LOADING);\nconst requestChattingLogsSaga = createRequestSaga(REQUEST_CHATTING_LOGS, chattingAPI.requestChattingLogs);\nconst requestChattingListSaga = createRequestSaga(REQUEST_CHATTING_LIST, chattingAPI.requestChattingList);\nexport function* chattingSaga() {\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\n  yield takeLatest(REQUEST_CHATTING_LIST, requestChattingListSaga);\n}\nconst initialState = {\n  other: null,\n  logs: [],\n  chat: false,\n  chattingList: [],\n  loading: false\n};\nexport default handleActions({\n  [SET_OTHER_TO_CHAT]: (state, _ref) => {\n    let {\n      payload: other\n    } = _ref;\n    return { ...state,\n      other\n    };\n  },\n  [INITIALIZE_OTHER]: state => ({ ...state,\n    other: null\n  }),\n  [SEND_CHATTING]: (state, _ref2) => {\n    let {\n      payload: {\n        receiver,\n        message,\n        time\n      }\n    } = _ref2;\n    if (!state.logs[receiver]) state.logs[receiver] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [receiver]: [...state.logs[receiver], {\n          msg: message,\n          type: 'send',\n          time\n        }]\n      }\n    };\n  },\n  [RECEIVE_CHATTING]: (state, _ref3) => {\n    let {\n      payload: {\n        sender,\n        message,\n        time\n      }\n    } = _ref3;\n    if (!state.logs[sender]) state.logs[sender] = [];\n    return { ...state,\n      logs: { ...state.logs,\n        [sender]: [...state.logs[sender], {\n          msg: message,\n          sender,\n          type: 'received',\n          time\n        }]\n      }\n    };\n  },\n  [OPEN_CHATTING]: state => ({ ...state,\n    chat: true\n  }),\n  [CLOSE_CHATTING]: state => ({ ...state,\n    chat: false,\n    other: null,\n    logs: []\n  }),\n  [REQUEST_CHATTING_LOGS_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: {\n        other,\n        list\n      }\n    } = _ref4;\n    return { ...state,\n      logs: [...list],\n      loading: false\n    };\n  },\n  [REQUEST_CHATTING_LOGS_FAILURE]: (state, _ref5) => {\n    let {\n      payload: error\n    } = _ref5;\n    return { ...state,\n      error\n    };\n  },\n  [REQUEST_CHATTING_LIST_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: list\n    } = _ref6;\n    return { ...state,\n      chattingList: [...list],\n      loading: false\n    };\n  },\n  [REQUEST_CHATTING_LIST_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return { ...state,\n      error\n    };\n  },\n  [START_LOADING]: state => ({ ...state,\n    loading: true\n  })\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","chattingAPI","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_CHATTING","RECEIVE_CHATTING","OPEN_CHATTING","CLOSE_CHATTING","START_LOADING","REQUEST_CHATTING_LOGS","REQUEST_CHATTING_LOGS_SUCCESS","REQUEST_CHATTING_LOGS_FAILURE","REQUEST_CHATTING_LIST","REQUEST_CHATTING_LIST_SUCCESS","REQUEST_CHATTING_LIST_FAILURE","setOtherToChat","initializeOther","sendChatting","receiveChatting","openChatting","closeChatting","requestChattingLogs","requestChattingList","startLoading","requestChattingLogsSaga","requestChattingListSaga","chattingSaga","initialState","other","logs","chat","chattingList","loading","state","payload","receiver","message","time","msg","type","sender","list","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B;AAEA,MAAMC,iBAAiB,GAAG,4BAA1B;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AACA,MAAMC,aAAa,GAAG,wBAAtB;AACA,MAAMC,gBAAgB,GAAG,2BAAzB;AACA,MAAMC,aAAa,GAAG,wBAAtB;AACA,MAAMC,cAAc,GAAG,yBAAvB;AACA,MAAMC,aAAa,GAAG,wBAAtB;AAEA,MAAM,CACJC,qBADI,EAEJC,6BAFI,EAGJC,6BAHI,IAIFX,wBAAwB,CAAC,gCAAD,CAJ5B;AAKA,MAAM,CACJY,qBADI,EAEJC,6BAFI,EAGJC,6BAHI,IAIFd,wBAAwB,CAAC,gCAAD,CAJ5B;AAMA,OAAO,MAAMe,cAAc,GAAGnB,YAAY,CAACM,iBAAD,CAAnC;AACP,OAAO,MAAMc,eAAe,GAAGpB,YAAY,CAACO,gBAAD,CAApC;AACP,OAAO,MAAMc,YAAY,GAAGrB,YAAY,CAACQ,aAAD,CAAjC;AACP,OAAO,MAAMc,eAAe,GAAGtB,YAAY,CAACS,gBAAD,CAApC;AACP,OAAO,MAAMc,YAAY,GAAGvB,YAAY,CAACU,aAAD,CAAjC;AACP,OAAO,MAAMc,aAAa,GAAGxB,YAAY,CAACW,cAAD,CAAlC;AACP,OAAO,MAAMc,mBAAmB,GAAGzB,YAAY,CAACa,qBAAD,CAAxC;AACP,OAAO,MAAMa,mBAAmB,GAAG1B,YAAY,CAACgB,qBAAD,CAAxC;AACP,OAAO,MAAMW,YAAY,GAAG3B,YAAY,CAACY,aAAD,CAAjC;AAEP,MAAMgB,uBAAuB,GAAGzB,iBAAiB,CAC/CU,qBAD+C,EAE/CR,WAAW,CAACoB,mBAFmC,CAAjD;AAKA,MAAMI,uBAAuB,GAAG1B,iBAAiB,CAC/Ca,qBAD+C,EAE/CX,WAAW,CAACqB,mBAFmC,CAAjD;AAKA,OAAO,UAAUI,YAAV,GAAyB;AAC9B,QAAM5B,UAAU,CAACW,qBAAD,EAAwBe,uBAAxB,CAAhB;AACA,QAAM1B,UAAU,CAACc,qBAAD,EAAwBa,uBAAxB,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE,KAHa;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAQA,eAAenC,aAAa,CAC1B;AACE,GAACK,iBAAD,GAAqB,CAAC+B,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEN;AAAX,KAAR;AAAA,WAAgC,EACnD,GAAGK,KADgD;AAEnDL,MAAAA;AAFmD,KAAhC;AAAA,GADvB;AAKE,GAACzB,gBAAD,GAAqB8B,KAAD,KAAY,EAC9B,GAAGA,KAD2B;AAE9BL,IAAAA,KAAK,EAAE;AAFuB,GAAZ,CALtB;AASE,GAACxB,aAAD,GAAiB,CAAC6B,KAAD,YAAqD;AAAA,QAA7C;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBC,QAAAA;AAArB;AAAX,KAA6C;AACpE,QAAI,CAACJ,KAAK,CAACJ,IAAN,CAAWM,QAAX,CAAL,EAA2BF,KAAK,CAACJ,IAAN,CAAWM,QAAX,IAAuB,EAAvB;AAE3B,WAAO,EACL,GAAGF,KADE;AAELJ,MAAAA,IAAI,EAAE,EACJ,GAAGI,KAAK,CAACJ,IADL;AAEJ,SAACM,QAAD,GAAY,CACV,GAAGF,KAAK,CAACJ,IAAN,CAAWM,QAAX,CADO,EAEV;AAAEG,UAAAA,GAAG,EAAEF,OAAP;AAAgBG,UAAAA,IAAI,EAAE,MAAtB;AAA8BF,UAAAA;AAA9B,SAFU;AAFR;AAFD,KAAP;AAUD,GAtBH;AAuBE,GAAChC,gBAAD,GAAoB,CAAC4B,KAAD,YAAmD;AAAA,QAA3C;AAAEC,MAAAA,OAAO,EAAE;AAAEM,QAAAA,MAAF;AAAUJ,QAAAA,OAAV;AAAmBC,QAAAA;AAAnB;AAAX,KAA2C;AACrE,QAAI,CAACJ,KAAK,CAACJ,IAAN,CAAWW,MAAX,CAAL,EAAyBP,KAAK,CAACJ,IAAN,CAAWW,MAAX,IAAqB,EAArB;AACzB,WAAO,EACL,GAAGP,KADE;AAELJ,MAAAA,IAAI,EAAE,EACJ,GAAGI,KAAK,CAACJ,IADL;AAEJ,SAACW,MAAD,GAAU,CACR,GAAGP,KAAK,CAACJ,IAAN,CAAWW,MAAX,CADK,EAER;AAAEF,UAAAA,GAAG,EAAEF,OAAP;AAAgBI,UAAAA,MAAhB;AAAwBD,UAAAA,IAAI,EAAE,UAA9B;AAA0CF,UAAAA;AAA1C,SAFQ;AAFN;AAFD,KAAP;AAUD,GAnCH;AAoCE,GAAC/B,aAAD,GAAkB2B,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAYH,IAAAA,IAAI,EAAE;AAAlB,GAAZ,CApCnB;AAqCE,GAACvB,cAAD,GAAmB0B,KAAD,KAAY,EAC5B,GAAGA,KADyB;AAE5BH,IAAAA,IAAI,EAAE,KAFsB;AAG5BF,IAAAA,KAAK,EAAE,IAHqB;AAI5BC,IAAAA,IAAI,EAAE;AAJsB,GAAZ,CArCpB;AA2CE,GAACnB,6BAAD,GAAiC,CAACuB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAEN,QAAAA,KAAF;AAASa,QAAAA;AAAT;AAAX,KAAR;AAAA,WAA0C,EACzE,GAAGR,KADsE;AAEzEJ,MAAAA,IAAI,EAAE,CAAC,GAAGY,IAAJ,CAFmE;AAGzET,MAAAA,OAAO,EAAE;AAHgE,KAA1C;AAAA,GA3CnC;AAgDE,GAACrB,6BAAD,GAAiC,CAACsB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEQ;AAAX,KAAR;AAAA,WAAgC,EAC/D,GAAGT,KAD4D;AAE/DS,MAAAA;AAF+D,KAAhC;AAAA,GAhDnC;AAoDE,GAAC7B,6BAAD,GAAiC,CAACoB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEO;AAAX,KAAR;AAAA,WAA+B,EAC9D,GAAGR,KAD2D;AAE9DF,MAAAA,YAAY,EAAE,CAAC,GAAGU,IAAJ,CAFgD;AAG9DT,MAAAA,OAAO,EAAE;AAHqD,KAA/B;AAAA,GApDnC;AAyDE,GAAClB,6BAAD,GAAiC,CAACmB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEQ;AAAX,KAAR;AAAA,WAAgC,EAC/D,GAAGT,KAD4D;AAE/DS,MAAAA;AAF+D,KAAhC;AAAA,GAzDnC;AA6DE,GAAClC,aAAD,GAAkByB,KAAD,KAAY,EAC3B,GAAGA,KADwB;AAE3BD,IAAAA,OAAO,EAAE;AAFkB,GAAZ;AA7DnB,CAD0B,EAmE1BL,YAnE0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as chattingAPI from '../lib/api/chatting';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\r\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\r\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\r\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\r\nconst START_LOADING = 'chatting/START_LOADING';\r\n\r\nconst [\r\n  REQUEST_CHATTING_LOGS,\r\n  REQUEST_CHATTING_LOGS_SUCCESS,\r\n  REQUEST_CHATTING_LOGS_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\r\nconst [\r\n  REQUEST_CHATTING_LIST,\r\n  REQUEST_CHATTING_LIST_SUCCESS,\r\n  REQUEST_CHATTING_LIST_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LIST');\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendChatting = createAction(SEND_CHATTING);\r\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\r\nexport const openChatting = createAction(OPEN_CHATTING);\r\nexport const closeChatting = createAction(CLOSE_CHATTING);\r\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\r\nexport const requestChattingList = createAction(REQUEST_CHATTING_LIST);\r\nexport const startLoading = createAction(START_LOADING);\r\n\r\nconst requestChattingLogsSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LOGS,\r\n  chattingAPI.requestChattingLogs,\r\n);\r\n\r\nconst requestChattingListSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LIST,\r\n  chattingAPI.requestChattingList,\r\n);\r\n\r\nexport function* chattingSaga() {\r\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\r\n  yield takeLatest(REQUEST_CHATTING_LIST, requestChattingListSaga);\r\n}\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: [],\r\n  chat: false,\r\n  chattingList: [],\r\n  loading: false,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_CHATTING]: (state, { payload: { receiver, message, time } }) => {\r\n      if (!state.logs[receiver]) state.logs[receiver] = [];\r\n\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [receiver]: [\r\n            ...state.logs[receiver],\r\n            { msg: message, type: 'send', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    [RECEIVE_CHATTING]: (state, { payload: { sender, message, time } }) => {\r\n      if (!state.logs[sender]) state.logs[sender] = [];\r\n      return {\r\n        ...state,\r\n        logs: {\r\n          ...state.logs,\r\n          [sender]: [\r\n            ...state.logs[sender],\r\n            { msg: message, sender, type: 'received', time },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    [OPEN_CHATTING]: (state) => ({ ...state, chat: true }),\r\n    [CLOSE_CHATTING]: (state) => ({\r\n      ...state,\r\n      chat: false,\r\n      other: null,\r\n      logs: [],\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_SUCCESS]: (state, { payload: { other, list } }) => ({\r\n      ...state,\r\n      logs: [...list],\r\n      loading: false,\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [REQUEST_CHATTING_LIST_SUCCESS]: (state, { payload: list }) => ({\r\n      ...state,\r\n      chattingList: [...list],\r\n      loading: false,\r\n    }),\r\n    [REQUEST_CHATTING_LIST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [START_LOADING]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}