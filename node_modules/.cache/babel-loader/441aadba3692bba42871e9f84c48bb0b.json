{"ast":null,"code":"import _slicedToArray from\"C:/nani/connect/connect-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{useNavigate}from'../../../node_modules/react-router/index';import RegisterForm from'../../components/auth/RegisterForm';import{changeField,initializeForm,initializeTempInfo,duplicateCheck}from'../../modules/auth';import{jsx as _jsx}from\"react/jsx-runtime\";var RegisterContainer=function RegisterContainer(){var navigate=useNavigate();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var dispatch=useDispatch();var _useSelector=useSelector(function(_ref){var auth=_ref.auth,isDuplicate=_ref.isDuplicate;return{form:auth.register,isDuplicate:auth.isDuplicate};}),form=_useSelector.form,isDuplicate=_useSelector.isDuplicate;var onChange=function onChange(e){var _e$target=e.target,value=_e$target.value,name=_e$target.name;dispatch(changeField({form:'register',key:name,value:value}));};var onSubmit=function onSubmit(e){e.preventDefault();var username=form.username,password=form.password,passwordConfirm=form.passwordConfirm;if([username,password,passwordConfirm].includes('')){setError('빈 칸을 모두 입력하세요');return;}if(password!==passwordConfirm){setError('비밀번호가 일치하지 않습니다.');changeField({form:'register',key:'password',value:''});changeField({form:'register',key:'passwordConfirm',value:''});return;}dispatch(duplicateCheck({username:username}));};useEffect(function(){if(isDuplicate===null)return;if(isDuplicate){setError('이미 존재하는 아이디입니다.');}else{var username=form.username,password=form.password;navigate('/profile');dispatch(initializeTempInfo({username:username,password:password}));}},[isDuplicate,dispatch,form,navigate]);useEffect(function(){dispatch(initializeForm('register'));},[dispatch]);useEffect(function(){});return/*#__PURE__*/_jsx(RegisterForm,{error:error,form:form,onChange:onChange,onSubmit:onSubmit});};export default RegisterContainer;","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/auth/RegisterContainer.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useNavigate","RegisterForm","changeField","initializeForm","initializeTempInfo","duplicateCheck","RegisterContainer","navigate","error","setError","dispatch","auth","isDuplicate","form","register","onChange","e","target","value","name","key","onSubmit","preventDefault","username","password","passwordConfirm","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from '../../../node_modules/react-router/index';\r\nimport RegisterForm from '../../components/auth/RegisterForm';\r\nimport {\r\n  changeField,\r\n  initializeForm,\r\n  initializeTempInfo,\r\n  duplicateCheck,\r\n} from '../../modules/auth';\r\n\r\nconst RegisterContainer = () => {\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, isDuplicate } = useSelector(({ auth, isDuplicate }) => ({\r\n    form: auth.register,\r\n    isDuplicate: auth.isDuplicate,\r\n  }));\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요');\r\n      return;\r\n    }\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({ form: 'register', key: 'password', value: '' });\r\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\r\n      return;\r\n    }\r\n    dispatch(duplicateCheck({ username }));\r\n  };\r\n  useEffect(() => {\r\n    if (isDuplicate === null) return;\r\n    if (isDuplicate) {\r\n      setError('이미 존재하는 아이디입니다.');\r\n    } else {\r\n      const { username, password } = form;\r\n      navigate('/profile');\r\n      dispatch(\r\n        initializeTempInfo({\r\n          username,\r\n          password,\r\n        }),\r\n      );\r\n    }\r\n  }, [isDuplicate, dispatch, form, navigate]);\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {});\r\n  return (\r\n    <RegisterForm\r\n      error={error}\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterContainer;\r\n"]},"metadata":{},"sourceType":"module"}