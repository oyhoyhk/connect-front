{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes('user/CHECK');\nconst LOGOUT = 'user/LOGOUT';\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\nexport const tempSetUser = createAction(TEMP_SET_USER);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  console.log('in logoutSaga');\n\n  try {\n    yield call(authAPI.logout);\n    localStorage.removeItem('user');\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\nconst initialState = {\n  user: null,\n  checkError: null\n};\nexport default handleActions({\n  [CHECK_SUCCESS]: (state, _ref) => {\n    let {\n      payload: user\n    } = _ref;\n    return { ...state,\n      user,\n      checkError: null\n    };\n  },\n  [CHECK_FAILURE]: (state, _ref2) => {\n    let {\n      payload: error\n    } = _ref2;\n    return { ...state,\n      user: null,\n      checkError: error\n    };\n  },\n  [LOGOUT]: state => ({ ...state,\n    user: null\n  }),\n  [TEMP_SET_USER]: (state, _ref3) => {\n    let {\n      payload: user\n    } = _ref3;\n    return { ...state,\n      user: { ...user,\n        user: user\n      }\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/user.js"],"names":["createAction","handleActions","takeLatest","call","authAPI","createRequestSaga","createRequestActionTypes","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","TEMP_SET_USER","tempSetUser","check","logout","checkSaga","checkFailureSaga","localStorage","removeItem","e","console","log","logoutSaga","userSaga","initialState","user","checkError","state","payload","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,oBAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAIA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,aAAvB,IACJH,wBAAwB,CAAC,YAAD,CAD1B;AAGA,MAAMI,MAAM,GAAG,aAAf;AACA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,OAAO,MAAMC,WAAW,GAAGZ,YAAY,CAACW,aAAD,CAAhC;AACP,OAAO,MAAME,KAAK,GAAGb,YAAY,CAACO,KAAD,CAA1B;AACP,OAAO,MAAMO,MAAM,GAAGd,YAAY,CAACU,MAAD,CAA3B;AAEP,MAAMK,SAAS,GAAGV,iBAAiB,CAACE,KAAD,EAAQH,OAAO,CAACS,KAAhB,CAAnC;;AAEA,SAASG,gBAAT,GAA4B;AAC1B,MAAI;AACFC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrBF,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,MAAI;AACF,UAAMlB,IAAI,CAACC,OAAO,CAACU,MAAT,CAAV;AACAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAED,OAAO,UAAUI,QAAV,GAAqB;AAC1B,QAAMrB,UAAU,CAACK,KAAD,EAAQQ,SAAR,CAAhB;AACA,QAAMb,UAAU,CAACO,aAAD,EAAgBO,gBAAhB,CAAhB;AACA,QAAMd,UAAU,CAACQ,MAAD,EAASY,UAAT,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,eAAezB,aAAa,CAC1B;AACE,GAACO,aAAD,GAAiB,CAACmB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEH;AAAX,KAAR;AAAA,WAA+B,EAC9C,GAAGE,KAD2C;AAE9CF,MAAAA,IAF8C;AAG9CC,MAAAA,UAAU,EAAE;AAHkC,KAA/B;AAAA,GADnB;AAME,GAACjB,aAAD,GAAiB,CAACkB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEC;AAAX,KAAR;AAAA,WAAgC,EAC/C,GAAGF,KAD4C;AAE/CF,MAAAA,IAAI,EAAE,IAFyC;AAG/CC,MAAAA,UAAU,EAAEG;AAHmC,KAAhC;AAAA,GANnB;AAWE,GAACnB,MAAD,GAAWiB,KAAD,KAAY,EACpB,GAAGA,KADiB;AAEpBF,IAAAA,IAAI,EAAE;AAFc,GAAZ,CAXZ;AAeE,GAACd,aAAD,GAAiB,CAACgB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEH;AAAX,KAAR;AAAA,WAA+B,EAC9C,GAAGE,KAD2C;AAE9CF,MAAAA,IAAI,EAAE,EACJ,GAAGA,IADC;AAEJA,QAAAA,IAAI,EAAEA;AAFF;AAFwC,KAA/B;AAAA;AAfnB,CAD0B,EAwB1BD,YAxB0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] =\r\n  createRequestActionTypes('user/CHECK');\r\n\r\nconst LOGOUT = 'user/LOGOUT';\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    localStorage.removeItem('user');\r\n  } catch (e) {\r\n    console.log('localStorage is not working');\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  console.log('in logoutSaga');\r\n  try {\r\n    yield call(authAPI.logout);\r\n    localStorage.removeItem('user');\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user: {\r\n        ...user,\r\n        user: user,\r\n      },\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}