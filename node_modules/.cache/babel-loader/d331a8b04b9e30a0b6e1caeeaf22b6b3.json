{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\components\\\\Chatting\\\\ChatMessage.js\";\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatMessageBlock = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  ${_ref => {\n  let {\n    received\n  } = _ref;\n  return received && css`\n      justify-content: flex-start;\n    `;\n}}\n  ${_ref2 => {\n  let {\n    send\n  } = _ref2;\n  return send && css`\n      justify-content: flex-end;\n    `;\n}}\n`;\n_c = ChatMessageBlock;\nconst ChatMessageBox = styled.div`\n  display: flex;\n  width: 100%;\n  ${_ref3 => {\n  let {\n    type\n  } = _ref3;\n  return type === 'received' && css`\n      text-align: left;\n      color: blue;\n    `;\n}}\n  ${_ref4 => {\n  let {\n    type\n  } = _ref4;\n  return type === 'send' && css`\n      text-align: right;\n      color: #a30000;\n      justify-content: flex-end;\n    `;\n}}\n`;\n_c2 = ChatMessageBox;\nconst Nickname = styled.div`\n  color: white;\n  padding: 10px;\n  border-radius: 12px;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #73b2ff;\n`;\n_c3 = Nickname;\nconst Text = styled.div`\n  line-height: 1rem;\n  padding: 10px;\n  margin-bottom: 10px;\n  word-wrap: break-word;\n  max-width: 50%;\n  ${_ref5 => {\n  let {\n    type\n  } = _ref5;\n  return type === 'received' && css`\n      background: #d0f8ff;\n      border-radius: 15px;\n    `;\n}}\n\n  ${_ref6 => {\n  let {\n    type\n  } = _ref6;\n  return type === 'send' && css`\n      border: 1.5px solid brown;\n      background: #ffe3e7;\n      border-radius: 15px;\n    `;\n}}\n`;\n_c4 = Text;\nconst TimeBlock = styled.div``;\n_c5 = TimeBlock;\n\nconst Time = _ref7 => {\n  let {\n    time\n  } = _ref7;\n\n  const timeToString = time => {\n    const messageTime = new Date(time);\n    const now = new Date();\n    let result = '';\n    if (messageTime.getFullYear() !== now.getFullYear()) result += messageTime.getFullYear() + '년 ';\n    if (messageTime.getMonth() !== now.getMonth()) result += messageTime.getMonth() + 1 + '월\\n';\n    if (messageTime.getHours() === 0) result += '오전 12시 ';else if (messageTime.getHours() === 12) result += '오후 12시 ';else if (messageTime.getHours() < 12) result += '오전 ' + messageTime.getHours() < 10 ? '0' + messageTime.getHours() : messageTime.getHours() + '시 ';else result += '오후 ' + messageTime.getHours() - 12 < 10 ? '0' + (messageTime.getHours() - 12) + '시 ' : messageTime.getHours() - 12 + '시 ';\n    result += messageTime.getMinutes() < 10 ? '0' + messageTime.getMinutes() + '분' : messageTime.getMinutes() + '분';\n    return result;\n  };\n\n  return /*#__PURE__*/_jsxDEV(TimeBlock, {\n    children: timeToString(time)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 10\n  }, this);\n};\n\n_c6 = Time;\n\nconst ChatMessage = _ref8 => {\n  let {\n    type,\n    nickname,\n    msg,\n    time\n  } = _ref8;\n  console.log(time);\n  return /*#__PURE__*/_jsxDEV(ChatMessageBlock, {\n    type: type,\n    children: /*#__PURE__*/_jsxDEV(ChatMessageBox, {\n      type: type,\n      children: [type === 'received' ? /*#__PURE__*/_jsxDEV(Nickname, {\n        children: nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 32\n      }, this) : '', type === 'send' ? /*#__PURE__*/_jsxDEV(Time, {\n        time: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 28\n      }, this) : '', /*#__PURE__*/_jsxDEV(Text, {\n        type: type,\n        children: msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), type === 'received' ? /*#__PURE__*/_jsxDEV(Time, {\n        time: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 32\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_c7 = ChatMessage;\nexport default ChatMessage;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ChatMessageBlock\");\n$RefreshReg$(_c2, \"ChatMessageBox\");\n$RefreshReg$(_c3, \"Nickname\");\n$RefreshReg$(_c4, \"Text\");\n$RefreshReg$(_c5, \"TimeBlock\");\n$RefreshReg$(_c6, \"Time\");\n$RefreshReg$(_c7, \"ChatMessage\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/components/Chatting/ChatMessage.js"],"names":["React","styled","css","ChatMessageBlock","div","received","send","ChatMessageBox","type","Nickname","Text","TimeBlock","Time","time","timeToString","messageTime","Date","now","result","getFullYear","getMonth","getHours","getMinutes","ChatMessage","nickname","msg","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst ChatMessageBlock = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  ${({ received }) =>\r\n    received &&\r\n    css`\r\n      justify-content: flex-start;\r\n    `}\r\n  ${({ send }) =>\r\n    send &&\r\n    css`\r\n      justify-content: flex-end;\r\n    `}\r\n`;\r\n\r\nconst ChatMessageBox = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  ${({ type }) =>\r\n    type === 'received' &&\r\n    css`\r\n      text-align: left;\r\n      color: blue;\r\n    `}\r\n  ${({ type }) =>\r\n    type === 'send' &&\r\n    css`\r\n      text-align: right;\r\n      color: #a30000;\r\n      justify-content: flex-end;\r\n    `}\r\n`;\r\nconst Nickname = styled.div`\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 12px;\r\n  margin-bottom: 10px;\r\n  margin-right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #73b2ff;\r\n`;\r\nconst Text = styled.div`\r\n  line-height: 1rem;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  word-wrap: break-word;\r\n  max-width: 50%;\r\n  ${({ type }) =>\r\n    type === 'received' &&\r\n    css`\r\n      background: #d0f8ff;\r\n      border-radius: 15px;\r\n    `}\r\n\r\n  ${({ type }) =>\r\n    type === 'send' &&\r\n    css`\r\n      border: 1.5px solid brown;\r\n      background: #ffe3e7;\r\n      border-radius: 15px;\r\n    `}\r\n`;\r\nconst TimeBlock = styled.div``;\r\n\r\nconst Time = ({ time }) => {\r\n  const timeToString = (time) => {\r\n    const messageTime = new Date(time);\r\n    const now = new Date();\r\n    let result = '';\r\n\r\n    if (messageTime.getFullYear() !== now.getFullYear())\r\n      result += messageTime.getFullYear() + '년 ';\r\n    if (messageTime.getMonth() !== now.getMonth())\r\n      result += messageTime.getMonth() + 1 + '월\\n';\r\n    if (messageTime.getHours() === 0) result += '오전 12시 ';\r\n    else if (messageTime.getHours() === 12) result += '오후 12시 ';\r\n    else if (messageTime.getHours() < 12)\r\n      result +=\r\n        '오전 ' + messageTime.getHours() < 10\r\n          ? '0' + messageTime.getHours()\r\n          : messageTime.getHours() + '시 ';\r\n    else\r\n      result +=\r\n        '오후 ' + messageTime.getHours() - 12 < 10\r\n          ? '0' + (messageTime.getHours() - 12) + '시 '\r\n          : messageTime.getHours() - 12 + '시 ';\r\n\r\n    result +=\r\n      messageTime.getMinutes() < 10\r\n        ? '0' + messageTime.getMinutes() + '분'\r\n        : messageTime.getMinutes() + '분';\r\n\r\n    return result;\r\n  };\r\n\r\n  return <TimeBlock>{timeToString(time)}</TimeBlock>;\r\n};\r\n\r\nconst ChatMessage = ({ type, nickname, msg, time }) => {\r\n  console.log(time);\r\n  return (\r\n    <ChatMessageBlock type={type}>\r\n      <ChatMessageBox type={type}>\r\n        {type === 'received' ? <Nickname>{nickname}</Nickname> : ''}\r\n        {type === 'send' ? <Time time={time} /> : ''}\r\n        <Text type={type}>{msg}</Text>\r\n        {type === 'received' ? <Time time={time} /> : ''}\r\n      </ChatMessageBox>\r\n    </ChatMessageBlock>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n"]},"metadata":{},"sourceType":"module"}