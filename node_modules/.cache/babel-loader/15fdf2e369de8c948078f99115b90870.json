{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\common\\\\ChatHallContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ChatHall from '../../components/common/ChatHall';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { socket } from '../../lib/sockets/chatHallSocket';\nimport { getGuestNumber, sendMessage, receiveMessage, setUserList, getUserInfo, setChatHall, leaveChatHall, someoneLeft, someoneInOut, initializeChatHall } from '../../modules/chatHall';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatHallContainer = () => {\n  _s();\n\n  const [msg, setMsg] = useState('');\n  const dispatch = useDispatch();\n  const {\n    user,\n    userList,\n    msgList,\n    userInfo\n  } = useSelector(_ref => {\n    let {\n      chatHall,\n      user: {\n        user\n      }\n    } = _ref;\n    return {\n      user: chatHall.user,\n      userList: chatHall.userList,\n      msgList: chatHall.msgList,\n      userInfo: user\n    };\n  });\n  useEffect(() => {\n    console.log('userInfo', userInfo, 'user', user);\n\n    if (!user) {\n      dispatch(getGuestNumber());\n    } else {\n      const info = userInfo || user;\n      socket.emit('enter', {\n        username: info.username,\n        nickname: info.nickname,\n        profileImage: info.profileImage\n      }, response => {\n        if (response === 'success') {\n          localStorage.setItem('chatHall', JSON.stringify(info));\n        }\n      });\n    }\n\n    const onBeforeUnload = e => {\n      const username = userInfo ? userInfo.username : user.username;\n      socket.emit('leave_chat_hall', username);\n    };\n\n    window.addEventListener('beforeunload', onBeforeUnload);\n    socket.on('broadcastMsg', data => {\n      dispatch(receiveMessage({\n        received: true,\n        ...data\n      }));\n    });\n    socket.on('someone_entered', data => {\n      dispatch(setUserList(data));\n      dispatch(someoneInOut({\n        action: 'in',\n        nickname: data[data.length - 1].nickname\n      }));\n    });\n    socket.on('someone_left', data => {\n      console.log('someone_left, data : ', data);\n      dispatch(someoneLeft(data));\n      dispatch(someoneInOut({\n        action: 'out',\n        nickname: data\n      }));\n    });\n    return () => {\n      console.log('clean up', user);\n      dispatch(leaveChatHall());\n      localStorage.removeItem('chatHall');\n      socket.removeAllListeners();\n    };\n  }, [dispatch, user, userInfo]);\n\n  const onChange = e => {\n    setMsg(e.target.value);\n  };\n\n  const changeScroll = useCallback(e => {\n    e.scrollTop = e.scrollHeight;\n  }, []);\n\n  const onSubmit = () => {\n    if (msg === '') return;\n    socket.emit('msg', {\n      nickname: user.nickname,\n      msg: msg.trim()\n    });\n    dispatch(sendMessage({\n      send: true,\n      nickname: user.nickname,\n      msg: msg.trim()\n    }));\n    setMsg('');\n  };\n\n  const onKeySubmit = e => {\n    if (e.key === 'Enter') {\n      onSubmit();\n      setMsg('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatHall, {\n    changeScroll: changeScroll,\n    msg: msg,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    onKeySubmit: onKeySubmit,\n    msgList: msgList,\n    userList: userList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatHallContainer, \"hF5awHLi5TSW2WxgD0gRJ5789yM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChatHallContainer;\nexport default ChatHallContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatHallContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/common/ChatHallContainer.js"],"names":["React","useCallback","useEffect","useState","ChatHall","useDispatch","useSelector","socket","getGuestNumber","sendMessage","receiveMessage","setUserList","getUserInfo","setChatHall","leaveChatHall","someoneLeft","someoneInOut","initializeChatHall","ChatHallContainer","msg","setMsg","dispatch","user","userList","msgList","userInfo","chatHall","console","log","info","emit","username","nickname","profileImage","response","localStorage","setItem","JSON","stringify","onBeforeUnload","e","window","addEventListener","on","data","received","action","length","removeItem","removeAllListeners","onChange","target","value","changeScroll","scrollTop","scrollHeight","onSubmit","trim","send","onKeySubmit","key"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport ChatHall from '../../components/common/ChatHall';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { socket } from '../../lib/sockets/chatHallSocket';\r\nimport {\r\n  getGuestNumber,\r\n  sendMessage,\r\n  receiveMessage,\r\n  setUserList,\r\n  getUserInfo,\r\n  setChatHall,\r\n  leaveChatHall,\r\n  someoneLeft,\r\n  someoneInOut,\r\n  initializeChatHall,\r\n} from '../../modules/chatHall';\r\n\r\nconst ChatHallContainer = () => {\r\n  const [msg, setMsg] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const { user, userList, msgList, userInfo } = useSelector(\r\n    ({ chatHall, user: { user } }) => ({\r\n      user: chatHall.user,\r\n      userList: chatHall.userList,\r\n      msgList: chatHall.msgList,\r\n      userInfo: user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    console.log('userInfo', userInfo, 'user', user);\r\n    if (!user) {\r\n      dispatch(getGuestNumber());\r\n    } else {\r\n      const info = userInfo || user;\r\n\r\n      socket.emit(\r\n        'enter',\r\n        {\r\n          username: info.username,\r\n          nickname: info.nickname,\r\n          profileImage: info.profileImage,\r\n        },\r\n        (response) => {\r\n          if (response === 'success') {\r\n            localStorage.setItem('chatHall', JSON.stringify(info));\r\n          }\r\n        },\r\n      );\r\n    }\r\n\r\n    const onBeforeUnload = (e) => {\r\n      const username = userInfo ? userInfo.username : user.username;\r\n      socket.emit('leave_chat_hall', username);\r\n    };\r\n    window.addEventListener('beforeunload', onBeforeUnload);\r\n    socket.on('broadcastMsg', (data) => {\r\n      dispatch(receiveMessage({ received: true, ...data }));\r\n    });\r\n    socket.on('someone_entered', (data) => {\r\n      dispatch(setUserList(data));\r\n      dispatch(\r\n        someoneInOut({\r\n          action: 'in',\r\n          nickname: data[data.length - 1].nickname,\r\n        }),\r\n      );\r\n    });\r\n    socket.on('someone_left', (data) => {\r\n      console.log('someone_left, data : ', data);\r\n      dispatch(someoneLeft(data));\r\n      dispatch(someoneInOut({ action: 'out', nickname: data }));\r\n    });\r\n    return () => {\r\n      console.log('clean up', user);\r\n      dispatch(leaveChatHall());\r\n      localStorage.removeItem('chatHall');\r\n      socket.removeAllListeners();\r\n    };\r\n  }, [dispatch, user, userInfo]);\r\n\r\n  const onChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const changeScroll = useCallback((e) => {\r\n    e.scrollTop = e.scrollHeight;\r\n  }, []);\r\n\r\n  const onSubmit = () => {\r\n    if (msg === '') return;\r\n    socket.emit('msg', { nickname: user.nickname, msg: msg.trim() });\r\n    dispatch(\r\n      sendMessage({ send: true, nickname: user.nickname, msg: msg.trim() }),\r\n    );\r\n    setMsg('');\r\n  };\r\n\r\n  const onKeySubmit = (e) => {\r\n    if (e.key === 'Enter') {\r\n      onSubmit();\r\n      setMsg('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatHall\r\n      changeScroll={changeScroll}\r\n      msg={msg}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      onKeySubmit={onKeySubmit}\r\n      msgList={msgList}\r\n      userList={userList}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChatHallContainer;\r\n"]},"metadata":{},"sourceType":"module"}