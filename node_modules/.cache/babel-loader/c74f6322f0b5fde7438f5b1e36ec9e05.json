{"ast":null,"code":"import _defineProperty from\"C:/nani/connect/connect-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _toConsumableArray from\"C:/nani/connect/connect-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/nani/connect/connect-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/nani/connect/connect-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _handleActions;import _regeneratorRuntime from\"C:\\\\nani\\\\connect\\\\connect-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(closeChatSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(chattingSaga);import{createAction,handleActions}from'redux-actions';import{takeLatest,call}from'redux-saga/effects';import createRequestSaga,{createRequestActionTypes}from'../lib/createRequestSaga';import*as chattingAPI from'../lib/api/chatting';var SET_OTHER_TO_CHAT='chatting/SET_OTHER_TO_CHAT';var INITIALIZE_OTHER='chatting/INITIALIZE_OTHER';var SEND_CHATTING='chatting/SEND_CHATTING';var RECEIVE_CHATTING='chatting/RECEIVE_CHATTING';var OPEN_CHATTING='chatting/OPEN_CHATTING';var CLOSE_CHATTING='chatting/CLOSE_CHATTING';var START_LOADING='chatting/START_LOADING';var CLOSE_CHAT='chatting/CLOSE_CHAT';var _createRequestActionT=createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS'),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),REQUEST_CHATTING_LOGS=_createRequestActionT2[0],REQUEST_CHATTING_LOGS_SUCCESS=_createRequestActionT2[1],REQUEST_CHATTING_LOGS_FAILURE=_createRequestActionT2[2];var _createRequestActionT3=createRequestActionTypes('chatting/REQUEST_CHATTING_LIST'),_createRequestActionT4=_slicedToArray(_createRequestActionT3,3),REQUEST_CHATTING_LIST=_createRequestActionT4[0],REQUEST_CHATTING_LIST_SUCCESS=_createRequestActionT4[1],REQUEST_CHATTING_LIST_FAILURE=_createRequestActionT4[2];export var setOtherToChat=createAction(SET_OTHER_TO_CHAT);export var initializeOther=createAction(INITIALIZE_OTHER);export var sendChatting=createAction(SEND_CHATTING);export var receiveChatting=createAction(RECEIVE_CHATTING);export var openChatting=createAction(OPEN_CHATTING);export var closeChatting=createAction(CLOSE_CHATTING);export var requestChattingLogs=createAction(REQUEST_CHATTING_LOGS);export var requestChattingList=createAction(REQUEST_CHATTING_LIST);export var startLoading=createAction(START_LOADING);export var closeChat=createAction(CLOSE_CHAT);var requestChattingLogsSaga=createRequestSaga(REQUEST_CHATTING_LOGS,chattingAPI.requestChattingLogs);var requestChattingListSaga=createRequestSaga(REQUEST_CHATTING_LIST,chattingAPI.requestChattingList);function closeChatSaga(_ref){var _ref$payload,sender,receiver;return _regeneratorRuntime.wrap(function closeChatSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$payload=_ref.payload,sender=_ref$payload.sender,receiver=_ref$payload.receiver;_context.prev=1;_context.next=4;return call(chattingAPI.closeChat,{sender:sender,receiver:receiver});case 4:_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);console.log(_context.t0);case 9:case\"end\":return _context.stop();}}},_marked,null,[[1,6]]);}export function chattingSaga(){return _regeneratorRuntime.wrap(function chattingSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(REQUEST_CHATTING_LOGS,requestChattingLogsSaga);case 2:_context2.next=4;return takeLatest(REQUEST_CHATTING_LIST,requestChattingListSaga);case 4:_context2.next=6;return takeLatest(CLOSE_CHAT,closeChatSaga);case 6:case\"end\":return _context2.stop();}}},_marked2);}var initialState={other:null,logs:[],chat:false,chattingList:[],loading:false,newMessages:0};export default handleActions((_handleActions={},_defineProperty(_handleActions,SET_OTHER_TO_CHAT,function(state,_ref2){var other=_ref2.payload;return _objectSpread(_objectSpread({},state),{},{other:other});}),_defineProperty(_handleActions,INITIALIZE_OTHER,function(state){return _objectSpread(_objectSpread({},state),{},{other:null});}),_defineProperty(_handleActions,SEND_CHATTING,function(state,_ref3){var _ref3$payload=_ref3.payload,message=_ref3$payload.message,time=_ref3$payload.time;return _objectSpread(_objectSpread({},state),{},{logs:[].concat(_toConsumableArray(state.logs),[{msg:message,type:'send',time:time}])});}),_defineProperty(_handleActions,RECEIVE_CHATTING,function(state,_ref4){var _ref4$payload=_ref4.payload,chatList=_ref4$payload.chatList,message=_ref4$payload.message,sender=_ref4$payload.sender;if(state.other&&state.other.receiver===sender){chatList=chatList.map(function(list){return list.uid===sender?_objectSpread(_objectSpread({},list),{},{new_messages:0}):list;});return _objectSpread(_objectSpread({},state),{},{chattingList:_toConsumableArray(chatList),newMessages:chatList.filter(function(list){return list.uid!==sender;}).reduce(function(a,c){return a+=c.new_messages;},0),logs:[].concat(_toConsumableArray(state.logs),[{type:'received',msg:message,time:new Date().toISOString()}])});}else{return _objectSpread(_objectSpread({},state),{},{chattingList:_toConsumableArray(chatList),newMessages:chatList.reduce(function(a,c){return a+=c.new_messages;},0)});}}),_defineProperty(_handleActions,OPEN_CHATTING,function(state){return _objectSpread(_objectSpread({},state),{},{chat:true});}),_defineProperty(_handleActions,CLOSE_CHATTING,function(state){return _objectSpread(_objectSpread({},state),{},{chat:false,other:null,logs:[]});}),_defineProperty(_handleActions,REQUEST_CHATTING_LOGS_SUCCESS,function(state,_ref5){var list=_ref5.payload;return _objectSpread(_objectSpread({},state),{},{logs:_toConsumableArray(list),loading:false});}),_defineProperty(_handleActions,REQUEST_CHATTING_LOGS_FAILURE,function(state,_ref6){var error=_ref6.payload;return _objectSpread(_objectSpread({},state),{},{error:error});}),_defineProperty(_handleActions,REQUEST_CHATTING_LIST_SUCCESS,function(state,_ref7){var list=_ref7.payload;return _objectSpread(_objectSpread({},state),{},{chattingList:_toConsumableArray(list),newMessages:list.reduce(function(a,c){return a+=c.new_messages;},0)});}),_defineProperty(_handleActions,REQUEST_CHATTING_LIST_FAILURE,function(state,_ref8){var error=_ref8.payload;return _objectSpread(_objectSpread({},state),{},{error:error});}),_defineProperty(_handleActions,START_LOADING,function(state){return _objectSpread(_objectSpread({},state),{},{loading:true});}),_handleActions),initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["closeChatSaga","chattingSaga","createAction","handleActions","takeLatest","call","createRequestSaga","createRequestActionTypes","chattingAPI","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_CHATTING","RECEIVE_CHATTING","OPEN_CHATTING","CLOSE_CHATTING","START_LOADING","CLOSE_CHAT","REQUEST_CHATTING_LOGS","REQUEST_CHATTING_LOGS_SUCCESS","REQUEST_CHATTING_LOGS_FAILURE","REQUEST_CHATTING_LIST","REQUEST_CHATTING_LIST_SUCCESS","REQUEST_CHATTING_LIST_FAILURE","setOtherToChat","initializeOther","sendChatting","receiveChatting","openChatting","closeChatting","requestChattingLogs","requestChattingList","startLoading","closeChat","requestChattingLogsSaga","requestChattingListSaga","payload","sender","receiver","console","log","initialState","other","logs","chat","chattingList","loading","newMessages","state","message","time","msg","type","chatList","map","list","uid","new_messages","filter","reduce","a","c","Date","toISOString","error"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as chattingAPI from '../lib/api/chatting';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\r\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\r\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\r\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\r\nconst START_LOADING = 'chatting/START_LOADING';\r\nconst CLOSE_CHAT = 'chatting/CLOSE_CHAT';\r\n\r\nconst [\r\n  REQUEST_CHATTING_LOGS,\r\n  REQUEST_CHATTING_LOGS_SUCCESS,\r\n  REQUEST_CHATTING_LOGS_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\r\nconst [\r\n  REQUEST_CHATTING_LIST,\r\n  REQUEST_CHATTING_LIST_SUCCESS,\r\n  REQUEST_CHATTING_LIST_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LIST');\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendChatting = createAction(SEND_CHATTING);\r\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\r\nexport const openChatting = createAction(OPEN_CHATTING);\r\nexport const closeChatting = createAction(CLOSE_CHATTING);\r\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\r\nexport const requestChattingList = createAction(REQUEST_CHATTING_LIST);\r\nexport const startLoading = createAction(START_LOADING);\r\nexport const closeChat = createAction(CLOSE_CHAT);\r\n\r\nconst requestChattingLogsSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LOGS,\r\n  chattingAPI.requestChattingLogs,\r\n);\r\n\r\nconst requestChattingListSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LIST,\r\n  chattingAPI.requestChattingList,\r\n);\r\n\r\nfunction* closeChatSaga({ payload: { sender, receiver } }) {\r\n  try {\r\n    yield call(chattingAPI.closeChat, { sender, receiver });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* chattingSaga() {\r\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\r\n  yield takeLatest(REQUEST_CHATTING_LIST, requestChattingListSaga);\r\n  yield takeLatest(CLOSE_CHAT, closeChatSaga);\r\n}\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: [],\r\n  chat: false,\r\n  chattingList: [],\r\n  loading: false,\r\n  newMessages: 0,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_CHATTING]: (state, { payload: { message, time } }) => {\r\n      return {\r\n        ...state,\r\n        logs: [...state.logs, { msg: message, type: 'send', time }],\r\n      };\r\n    },\r\n    [RECEIVE_CHATTING]: (state, { payload: { chatList, message, sender } }) => {\r\n      if (state.other && state.other.receiver === sender) {\r\n        chatList = chatList.map((list) =>\r\n          list.uid === sender ? { ...list, new_messages: 0 } : list,\r\n        );\r\n        return {\r\n          ...state,\r\n          chattingList: [...chatList],\r\n          newMessages: chatList\r\n            .filter((list) => list.uid !== sender)\r\n            .reduce((a, c) => (a += c.new_messages), 0),\r\n          logs: [\r\n            ...state.logs,\r\n            { type: 'received', msg: message, time: new Date().toISOString() },\r\n          ],\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          chattingList: [...chatList],\r\n          newMessages: chatList.reduce((a, c) => (a += c.new_messages), 0),\r\n        };\r\n      }\r\n    },\r\n    [OPEN_CHATTING]: (state) => ({ ...state, chat: true }),\r\n    [CLOSE_CHATTING]: (state) => ({\r\n      ...state,\r\n      chat: false,\r\n      other: null,\r\n      logs: [],\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_SUCCESS]: (state, { payload: list }) => ({\r\n      ...state,\r\n      logs: [...list],\r\n      loading: false,\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [REQUEST_CHATTING_LIST_SUCCESS]: (state, { payload: list }) => ({\r\n      ...state,\r\n      chattingList: [...list],\r\n      newMessages: list.reduce((a, c) => (a += c.new_messages), 0),\r\n    }),\r\n    [REQUEST_CHATTING_LIST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [START_LOADING]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}