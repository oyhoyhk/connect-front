{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\Chatting\\\\ChattingContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Chatting from '../../components/Chatting/Chatting';\nimport { initializeOther } from '../../modules/chatting';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChattingContainer = () => {\n  _s();\n\n  const convertTime = time => {\n    const [dateInfo, timeInfo] = time.split('T');\n    const [year, month, day] = dateInfo.split('-').map(Number);\n    const [hour, minute] = timeInfo.slice(0, 6).split(':').map(Number);\n    return {\n      year,\n      month,\n      day,\n      hour,\n      minute\n    };\n  };\n\n  const changeScroll = useCallback(e => {\n    e.scrollTop = e.scrollHeight;\n  }, []);\n  const {\n    other,\n    logs\n  } = useSelector(_ref => {\n    let {\n      chatting: {\n        other,\n        logs\n      }\n    } = _ref;\n    return {\n      other,\n      logs\n    };\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(initializeOther());\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Chatting, {\n    other: other,\n    changeScroll: changeScroll,\n    logs: logs,\n    convertTime: convertTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChattingContainer, \"HnR44ZEOLeZVLNiyAj1RmUURDVw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChattingContainer;\nexport default ChattingContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChattingContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/Chatting/ChattingContainer.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","Chatting","initializeOther","ChattingContainer","convertTime","time","dateInfo","timeInfo","split","year","month","day","map","Number","hour","minute","slice","changeScroll","e","scrollTop","scrollHeight","other","logs","chatting","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,SAASC,eAAT,QAAgC,wBAAhC;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5B,UAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBF,IAAI,CAACG,KAAL,CAAW,GAAX,CAA7B;AAEA,UAAM,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,IAAqBL,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBI,GAApB,CAAwBC,MAAxB,CAA3B;AAEA,UAAM,CAACC,IAAD,EAAOC,MAAP,IAAiBR,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBR,KAArB,CAA2B,GAA3B,EAAgCI,GAAhC,CAAoCC,MAApC,CAAvB;AAEA,WAAO;AAAEJ,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,GAAf;AAAoBG,MAAAA,IAApB;AAA0BC,MAAAA;AAA1B,KAAP;AACD,GARD;;AASA,QAAME,YAAY,GAAGnB,WAAW,CAAEoB,CAAD,IAAO;AACtCA,IAAAA,CAAC,CAACC,SAAF,GAAcD,CAAC,CAACE,YAAhB;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAGA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBtB,WAAW,CAAC;AAAA,QAAC;AAAEuB,MAAAA,QAAQ,EAAE;AAAEF,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAZ,KAAD;AAAA,WAAoC;AACtED,MAAAA,KADsE;AAEtEC,MAAAA;AAFsE,KAApC;AAAA,GAAD,CAAnC;AAIA,QAAME,QAAQ,GAAGzB,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX2B,MAAAA,QAAQ,CAACtB,eAAe,EAAhB,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,CAACsB,QAAD,CAJM,CAAT;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,KAAK,EAAEH,KADT;AAEE,IAAA,YAAY,EAAEJ,YAFhB;AAGE,IAAA,IAAI,EAAEK,IAHR;AAIE,IAAA,WAAW,EAAElB;AAJf;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA/BD;;GAAMD,iB;UAaoBH,W,EAIPD,W;;;KAjBbI,iB;AAiCN,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Chatting from '../../components/Chatting/Chatting';\r\nimport { initializeOther } from '../../modules/chatting';\r\n\r\nconst ChattingContainer = () => {\r\n  const convertTime = (time) => {\r\n    const [dateInfo, timeInfo] = time.split('T');\r\n\r\n    const [year, month, day] = dateInfo.split('-').map(Number);\r\n\r\n    const [hour, minute] = timeInfo.slice(0, 6).split(':').map(Number);\r\n\r\n    return { year, month, day, hour, minute };\r\n  };\r\n  const changeScroll = useCallback((e) => {\r\n    e.scrollTop = e.scrollHeight;\r\n  }, []);\r\n  const { other, logs } = useSelector(({ chatting: { other, logs } }) => ({\r\n    other,\r\n    logs,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initializeOther());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <Chatting\r\n      other={other}\r\n      changeScroll={changeScroll}\r\n      logs={logs}\r\n      convertTime={convertTime}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChattingContainer;\r\n"]},"metadata":{},"sourceType":"module"}