{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\auth\\\\RegisterContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from '../../../node_modules/react-router/index';\nimport RegisterForm from '../../components/auth/RegisterForm';\nimport { changeField, initializeForm, initializeTempInfo, duplicateCheck } from '../../modules/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterContainer = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    isDuplicate\n  } = useSelector(_ref => {\n    let {\n      auth,\n      isDuplicate\n    } = _ref;\n    return {\n      form: auth.register,\n      isDuplicate: auth.isDuplicate\n    };\n  });\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form;\n\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요');\n      return;\n    }\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      });\n      return;\n    }\n\n    dispatch(duplicateCheck({\n      username\n    }));\n  };\n\n  useEffect(() => {\n    if (isDuplicate === null) return;\n\n    if (isDuplicate) {\n      setError('이미 존재하는 아이디입니다.');\n    } else {\n      const {\n        username,\n        password\n      } = form;\n      navigate('/profile');\n      dispatch(initializeTempInfo({\n        username,\n        password\n      }));\n    }\n  }, [isDuplicate, dispatch, form, navigate]);\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(RegisterForm, {\n    error: error,\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterContainer, \"ZBL86PkA7K0wi5XM5Gyn0lXcosI=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n\n_c = RegisterContainer;\nexport default RegisterContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/auth/RegisterContainer.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useNavigate","RegisterForm","changeField","initializeForm","initializeTempInfo","duplicateCheck","RegisterContainer","navigate","error","setError","dispatch","form","isDuplicate","auth","register","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,kBAHF,EAIEC,cAJF,QAKO,oBALP;;;AAOA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBb,WAAW,CAAC;AAAA,QAAC;AAAEc,MAAAA,IAAF;AAAQD,MAAAA;AAAR,KAAD;AAAA,WAA4B;AACpED,MAAAA,IAAI,EAAEE,IAAI,CAACC,QADyD;AAEpEF,MAAAA,WAAW,EAAEC,IAAI,CAACD;AAFkD,KAA5B;AAAA,GAAD,CAAzC;;AAKA,QAAMG,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,CAAC,CAACG,MAA1B;AACAT,IAAAA,QAAQ,CACNR,WAAW,CAAC;AACVS,MAAAA,IAAI,EAAE,UADI;AAEVS,MAAAA,GAAG,EAAEF,IAFK;AAGVD,MAAAA;AAHU,KAAD,CADL,CAAR;AAOD,GATD;;AAUA,QAAMI,QAAQ,GAAIL,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACM,cAAF;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAA0Cd,IAAhD;;AACA,QAAI,CAACY,QAAD,EAAWC,QAAX,EAAqBC,eAArB,EAAsCC,QAAtC,CAA+C,EAA/C,CAAJ,EAAwD;AACtDjB,MAAAA,QAAQ,CAAC,eAAD,CAAR;AACA;AACD;;AACD,QAAIe,QAAQ,KAAKC,eAAjB,EAAkC;AAChChB,MAAAA,QAAQ,CAAC,kBAAD,CAAR;AACAP,MAAAA,WAAW,CAAC;AAAES,QAAAA,IAAI,EAAE,UAAR;AAAoBS,QAAAA,GAAG,EAAE,UAAzB;AAAqCH,QAAAA,KAAK,EAAE;AAA5C,OAAD,CAAX;AACAf,MAAAA,WAAW,CAAC;AAAES,QAAAA,IAAI,EAAE,UAAR;AAAoBS,QAAAA,GAAG,EAAE,iBAAzB;AAA4CH,QAAAA,KAAK,EAAE;AAAnD,OAAD,CAAX;AACA;AACD;;AACDP,IAAAA,QAAQ,CAACL,cAAc,CAAC;AAAEkB,MAAAA;AAAF,KAAD,CAAf,CAAR;AACD,GAdD;;AAeA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,WAAW,KAAK,IAApB,EAA0B;;AAC1B,QAAIA,WAAJ,EAAiB;AACfH,MAAAA,QAAQ,CAAC,iBAAD,CAAR;AACD,KAFD,MAEO;AACL,YAAM;AAAEc,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyBb,IAA/B;AACAJ,MAAAA,QAAQ,CAAC,UAAD,CAAR;AACAG,MAAAA,QAAQ,CACNN,kBAAkB,CAAC;AACjBmB,QAAAA,QADiB;AAEjBC,QAAAA;AAFiB,OAAD,CADZ,CAAR;AAMD;AACF,GAdQ,EAcN,CAACZ,WAAD,EAAcF,QAAd,EAAwBC,IAAxB,EAA8BJ,QAA9B,CAdM,CAAT;AAeAX,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACP,cAAc,CAAC,UAAD,CAAf,CAAR;AACD,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,CAAT;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEY,KADT;AAEE,IAAA,IAAI,EAAEG,IAFR;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAIE,IAAA,QAAQ,EAAEM;AAJZ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA9DD;;GAAMf,iB;UACaN,W,EAEAF,W,EACaC,W;;;KAJ1BO,iB;AAgEN,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from '../../../node_modules/react-router/index';\r\nimport RegisterForm from '../../components/auth/RegisterForm';\r\nimport {\r\n  changeField,\r\n  initializeForm,\r\n  initializeTempInfo,\r\n  duplicateCheck,\r\n} from '../../modules/auth';\r\n\r\nconst RegisterContainer = () => {\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, isDuplicate } = useSelector(({ auth, isDuplicate }) => ({\r\n    form: auth.register,\r\n    isDuplicate: auth.isDuplicate,\r\n  }));\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요');\r\n      return;\r\n    }\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({ form: 'register', key: 'password', value: '' });\r\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\r\n      return;\r\n    }\r\n    dispatch(duplicateCheck({ username }));\r\n  };\r\n  useEffect(() => {\r\n    if (isDuplicate === null) return;\r\n    if (isDuplicate) {\r\n      setError('이미 존재하는 아이디입니다.');\r\n    } else {\r\n      const { username, password } = form;\r\n      navigate('/profile');\r\n      dispatch(\r\n        initializeTempInfo({\r\n          username,\r\n          password,\r\n        }),\r\n      );\r\n    }\r\n  }, [isDuplicate, dispatch, form, navigate]);\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {});\r\n  return (\r\n    <RegisterForm\r\n      error={error}\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterContainer;\r\n"]},"metadata":{},"sourceType":"module"}