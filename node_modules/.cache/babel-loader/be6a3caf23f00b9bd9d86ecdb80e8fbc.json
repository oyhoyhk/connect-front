{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport * as authAPI from '../lib/api/auth';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst INITIALIZE_TEMP_INFO = 'auth/INITIALIZE_TEMP_INFO';\nconst SET_TEMP_INFO = 'auth/SET_TEMP_INFO';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nconst [DUPLICATE_CHECK, DUPLICATE_CHECK_SUCCESS, DUPLICATE_CHECK_FAILURE] = createRequestActionTypes('auth/DUPLICATE_CHECK');\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    key,\n    value\n  };\n});\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\nexport const initializeTempInfo = createAction(INITIALIZE_TEMP_INFO, _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return {\n    username,\n    password\n  };\n});\nexport const setTempInfo = createAction(SET_TEMP_INFO, (type, value) => ({\n  type,\n  value\n}));\nexport const register = createAction(REGISTER, formData => {\n  return {\n    formData\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    username,\n    password\n  } = _ref3;\n  return {\n    username,\n    password\n  };\n});\nexport const duplicateCheck = createAction(DUPLICATE_CHECK, _ref4 => {\n  let {\n    username\n  } = _ref4;\n  return {\n    username\n  };\n});\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nconst duplicateCheckSaga = createRequestSaga(DUPLICATE_CHECK, authAPI.duplicateCheck);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(DUPLICATE_CHECK, duplicateCheckSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  tempInfo: {\n    username: '',\n    password: '',\n    nickname: null,\n    profileImage: null\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref5) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref5;\n    const target = state[form];\n    return { ...state,\n      [form]: { ...target,\n        [key]: value\n      }\n    };\n  },\n  [INITIALIZE_FORM]: (state, _ref6) => {\n    let {\n      form\n    } = _ref6;\n    return { ...state,\n      [form]: initialState[form]\n    };\n  },\n  [INITIALIZE_TEMP_INFO]: (state, _ref7) => {\n    let {\n      payload: {\n        username,\n        password\n      }\n    } = _ref7;\n    return { ...state,\n      tempInfo: {\n        username,\n        password,\n        nickname: null,\n        profileImage: null\n      }\n    };\n  },\n  [SET_TEMP_INFO]: (state, _ref8) => {\n    let {\n      payload: {\n        type,\n        value\n      }\n    } = _ref8;\n    console.log(type, value, 'state', state);\n    return { ...state,\n      tempInfo: { ...state.tempInfo,\n        [type.type]: type.value\n      }\n    };\n  },\n  [REGISTER_SUCCESS]: (state, action) => ({ ...state,\n    authError: null,\n    auth: { ...action.payload\n    }\n  }),\n  [REGISTER_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      authError: error\n    };\n  },\n  [LOGIN_SUCCESS]: (state, _ref10) => {\n    let {\n      payload: auth\n    } = _ref10;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  [LOGIN_FAILURE]: (state, _ref11) => {\n    let {\n      payload: error\n    } = _ref11;\n    return { ...state,\n      authError: error\n    };\n  },\n  [DUPLICATE_CHECK_SUCCESS]: (state, _ref12) => {\n    let {\n      payload: auth\n    } = _ref12;\n    return { ...state\n    };\n  },\n  [DUPLICATE_CHECK_FAILURE]: (state, _ref13) => {\n    let {\n      payload: error\n    } = _ref13;\n    return { ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/auth.js"],"names":["createAction","handleActions","authAPI","takeLatest","createRequestSaga","createRequestActionTypes","CHANGE_FIELD","INITIALIZE_FORM","INITIALIZE_TEMP_INFO","SET_TEMP_INFO","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","DUPLICATE_CHECK","DUPLICATE_CHECK_SUCCESS","DUPLICATE_CHECK_FAILURE","changeField","form","key","value","initializeForm","initializeTempInfo","username","password","setTempInfo","type","register","formData","login","duplicateCheck","registerSaga","loginSaga","duplicateCheckSaga","authSaga","initialState","passwordConfirm","tempInfo","nickname","profileImage","auth","authError","state","payload","target","console","log","action","error"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\nconst INITIALIZE_TEMP_INFO = 'auth/INITIALIZE_TEMP_INFO';\r\nconst SET_TEMP_INFO = 'auth/SET_TEMP_INFO';\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n  createRequestActionTypes('auth/REGISTER');\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n  createRequestActionTypes('auth/LOGIN');\r\nconst [DUPLICATE_CHECK, DUPLICATE_CHECK_SUCCESS, DUPLICATE_CHECK_FAILURE] =\r\n  createRequestActionTypes('auth/DUPLICATE_CHECK');\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form,\r\n    key,\r\n    value,\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form);\r\nexport const initializeTempInfo = createAction(\r\n  INITIALIZE_TEMP_INFO,\r\n  ({ username, password }) => ({ username, password }),\r\n);\r\nexport const setTempInfo = createAction(SET_TEMP_INFO, (type, value) => ({\r\n  type,\r\n  value,\r\n}));\r\nexport const register = createAction(REGISTER, (formData) => {\r\n  return {\r\n    formData,\r\n  };\r\n});\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\nexport const duplicateCheck = createAction(DUPLICATE_CHECK, ({ username }) => ({\r\n  username,\r\n}));\r\n\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nconst duplicateCheckSaga = createRequestSaga(\r\n  DUPLICATE_CHECK,\r\n  authAPI.duplicateCheck,\r\n);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n  yield takeLatest(DUPLICATE_CHECK, duplicateCheckSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  tempInfo: {\r\n    username: '',\r\n    password: '',\r\n    nickname: null,\r\n    profileImage: null,\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) => {\r\n      const target = state[form];\r\n      return {\r\n        ...state,\r\n        [form]: {\r\n          ...target,\r\n          [key]: value,\r\n        },\r\n      };\r\n    },\r\n    [INITIALIZE_FORM]: (state, { form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n    }),\r\n    [INITIALIZE_TEMP_INFO]: (state, { payload: { username, password } }) => {\r\n      return {\r\n        ...state,\r\n        tempInfo: {\r\n          username,\r\n          password,\r\n          nickname: null,\r\n          profileImage: null,\r\n        },\r\n      };\r\n    },\r\n    [SET_TEMP_INFO]: (state, { payload: { type, value } }) => {\r\n      console.log(type, value, 'state', state);\r\n      return {\r\n        ...state,\r\n        tempInfo: {\r\n          ...state.tempInfo,\r\n          [type.type]: type.value,\r\n        },\r\n      };\r\n    },\r\n    [REGISTER_SUCCESS]: (state, action) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth: { ...action.payload },\r\n    }),\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    [DUPLICATE_CHECK_SUCCESS]: (state, { payload: auth }) => {\r\n      return {\r\n        ...state,\r\n      };\r\n    },\r\n    [DUPLICATE_CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n"]},"metadata":{},"sourceType":"module"}