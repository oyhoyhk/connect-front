{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as chattingAPI from '../lib/api/chatting';\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\nconst START_LOADING = 'chatting/START_LOADING';\nconst CLOSE_CHAT = 'chatting/CLOSE_CHAT';\nconst [REQUEST_CHATTING_LOGS, REQUEST_CHATTING_LOGS_SUCCESS, REQUEST_CHATTING_LOGS_FAILURE] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\nconst [REQUEST_CHATTING_LIST, REQUEST_CHATTING_LIST_SUCCESS, REQUEST_CHATTING_LIST_FAILURE] = createRequestActionTypes('chatting/REQUEST_CHATTING_LIST');\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\nexport const initializeOther = createAction(INITIALIZE_OTHER);\nexport const sendChatting = createAction(SEND_CHATTING);\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\nexport const openChatting = createAction(OPEN_CHATTING);\nexport const closeChatting = createAction(CLOSE_CHATTING);\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\nexport const requestChattingList = createAction(REQUEST_CHATTING_LIST);\nexport const startLoading = createAction(START_LOADING);\nexport const closeChat = createAction(CLOSE_CHAT);\nconst requestChattingLogsSaga = createRequestSaga(REQUEST_CHATTING_LOGS, chattingAPI.requestChattingLogs);\nconst requestChattingListSaga = createRequestSaga(REQUEST_CHATTING_LIST, chattingAPI.requestChattingList);\n\nfunction* cloesChatSaga(_ref) {\n  let {\n    payload: {\n      sender,\n      receiver\n    }\n  } = _ref;\n\n  try {\n    yield call(chattingAPI.closeChat, {\n      sender,\n      receiver\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* chattingSaga() {\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\n  yield takeLatest(REQUEST_CHATTING_LIST, requestChattingListSaga);\n}\nconst initialState = {\n  other: null,\n  logs: [],\n  chat: false,\n  chattingList: [],\n  loading: false,\n  newMessages: 0\n};\nexport default handleActions({\n  [SET_OTHER_TO_CHAT]: (state, _ref2) => {\n    let {\n      payload: other\n    } = _ref2;\n    return { ...state,\n      other\n    };\n  },\n  [INITIALIZE_OTHER]: state => ({ ...state,\n    other: null\n  }),\n  [SEND_CHATTING]: (state, _ref3) => {\n    let {\n      payload: {\n        message,\n        time\n      }\n    } = _ref3;\n    return { ...state,\n      logs: [...state.logs, {\n        msg: message,\n        type: 'send',\n        time\n      }]\n    };\n  },\n  [RECEIVE_CHATTING]: (state, _ref4) => {\n    let {\n      payload: {\n        chatList,\n        message,\n        sender\n      }\n    } = _ref4;\n\n    if (state.other && state.other.receiver === sender) {\n      chatList = chatList.map(list => list.uid === sender ? { ...list,\n        new_messages: 0\n      } : list);\n      return { ...state,\n        chattingList: [...chatList],\n        newMessages: chatList.filter(list => list.uid !== sender).reduce((a, c) => a += c.new_messages, 0),\n        logs: [...state.logs, {\n          type: 'received',\n          msg: message,\n          time: new Date().toISOString()\n        }]\n      };\n    } else {\n      return { ...state,\n        chattingList: [...chatList],\n        newMessages: chatList.reduce((a, c) => a += c.new_messages, 0)\n      };\n    }\n  },\n  [OPEN_CHATTING]: state => ({ ...state,\n    chat: true\n  }),\n  [CLOSE_CHATTING]: state => ({ ...state,\n    chat: false,\n    other: null,\n    logs: []\n  }),\n  [REQUEST_CHATTING_LOGS_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: list\n    } = _ref5;\n    return { ...state,\n      logs: [...list],\n      loading: false\n    };\n  },\n  [REQUEST_CHATTING_LOGS_FAILURE]: (state, _ref6) => {\n    let {\n      payload: error\n    } = _ref6;\n    return { ...state,\n      error\n    };\n  },\n  [REQUEST_CHATTING_LIST_SUCCESS]: (state, _ref7) => {\n    let {\n      payload: list\n    } = _ref7;\n    return { ...state,\n      chattingList: [...list],\n      newMessages: list.reduce((a, c) => a += c.new_messages, 0)\n    };\n  },\n  [REQUEST_CHATTING_LIST_FAILURE]: (state, _ref8) => {\n    let {\n      payload: error\n    } = _ref8;\n    return { ...state,\n      error\n    };\n  },\n  [START_LOADING]: state => ({ ...state,\n    loading: true\n  })\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatting.js"],"names":["createAction","handleActions","takeLatest","call","createRequestSaga","createRequestActionTypes","chattingAPI","SET_OTHER_TO_CHAT","INITIALIZE_OTHER","SEND_CHATTING","RECEIVE_CHATTING","OPEN_CHATTING","CLOSE_CHATTING","START_LOADING","CLOSE_CHAT","REQUEST_CHATTING_LOGS","REQUEST_CHATTING_LOGS_SUCCESS","REQUEST_CHATTING_LOGS_FAILURE","REQUEST_CHATTING_LIST","REQUEST_CHATTING_LIST_SUCCESS","REQUEST_CHATTING_LIST_FAILURE","setOtherToChat","initializeOther","sendChatting","receiveChatting","openChatting","closeChatting","requestChattingLogs","requestChattingList","startLoading","closeChat","requestChattingLogsSaga","requestChattingListSaga","cloesChatSaga","payload","sender","receiver","e","console","log","chattingSaga","initialState","other","logs","chat","chattingList","loading","newMessages","state","message","time","msg","type","chatList","map","list","uid","new_messages","filter","reduce","a","c","Date","toISOString","error"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as chattingAPI from '../lib/api/chatting';\r\n\r\nconst SET_OTHER_TO_CHAT = 'chatting/SET_OTHER_TO_CHAT';\r\nconst INITIALIZE_OTHER = 'chatting/INITIALIZE_OTHER';\r\nconst SEND_CHATTING = 'chatting/SEND_CHATTING';\r\nconst RECEIVE_CHATTING = 'chatting/RECEIVE_CHATTING';\r\nconst OPEN_CHATTING = 'chatting/OPEN_CHATTING';\r\nconst CLOSE_CHATTING = 'chatting/CLOSE_CHATTING';\r\nconst START_LOADING = 'chatting/START_LOADING';\r\nconst CLOSE_CHAT = 'chatting/CLOSE_CHAT';\r\n\r\nconst [\r\n  REQUEST_CHATTING_LOGS,\r\n  REQUEST_CHATTING_LOGS_SUCCESS,\r\n  REQUEST_CHATTING_LOGS_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LOGS');\r\nconst [\r\n  REQUEST_CHATTING_LIST,\r\n  REQUEST_CHATTING_LIST_SUCCESS,\r\n  REQUEST_CHATTING_LIST_FAILURE,\r\n] = createRequestActionTypes('chatting/REQUEST_CHATTING_LIST');\r\n\r\nexport const setOtherToChat = createAction(SET_OTHER_TO_CHAT);\r\nexport const initializeOther = createAction(INITIALIZE_OTHER);\r\nexport const sendChatting = createAction(SEND_CHATTING);\r\nexport const receiveChatting = createAction(RECEIVE_CHATTING);\r\nexport const openChatting = createAction(OPEN_CHATTING);\r\nexport const closeChatting = createAction(CLOSE_CHATTING);\r\nexport const requestChattingLogs = createAction(REQUEST_CHATTING_LOGS);\r\nexport const requestChattingList = createAction(REQUEST_CHATTING_LIST);\r\nexport const startLoading = createAction(START_LOADING);\r\nexport const closeChat = createAction(CLOSE_CHAT);\r\n\r\nconst requestChattingLogsSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LOGS,\r\n  chattingAPI.requestChattingLogs,\r\n);\r\n\r\nconst requestChattingListSaga = createRequestSaga(\r\n  REQUEST_CHATTING_LIST,\r\n  chattingAPI.requestChattingList,\r\n);\r\n\r\nfunction* cloesChatSaga({ payload: { sender, receiver } }) {\r\n  try {\r\n    yield call(chattingAPI.closeChat, { sender, receiver });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* chattingSaga() {\r\n  yield takeLatest(REQUEST_CHATTING_LOGS, requestChattingLogsSaga);\r\n  yield takeLatest(REQUEST_CHATTING_LIST, requestChattingListSaga);\r\n}\r\n\r\nconst initialState = {\r\n  other: null,\r\n  logs: [],\r\n  chat: false,\r\n  chattingList: [],\r\n  loading: false,\r\n  newMessages: 0,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_OTHER_TO_CHAT]: (state, { payload: other }) => ({\r\n      ...state,\r\n      other,\r\n    }),\r\n    [INITIALIZE_OTHER]: (state) => ({\r\n      ...state,\r\n      other: null,\r\n    }),\r\n    [SEND_CHATTING]: (state, { payload: { message, time } }) => {\r\n      return {\r\n        ...state,\r\n        logs: [...state.logs, { msg: message, type: 'send', time }],\r\n      };\r\n    },\r\n    [RECEIVE_CHATTING]: (state, { payload: { chatList, message, sender } }) => {\r\n      if (state.other && state.other.receiver === sender) {\r\n        chatList = chatList.map((list) =>\r\n          list.uid === sender ? { ...list, new_messages: 0 } : list,\r\n        );\r\n        return {\r\n          ...state,\r\n          chattingList: [...chatList],\r\n          newMessages: chatList\r\n            .filter((list) => list.uid !== sender)\r\n            .reduce((a, c) => (a += c.new_messages), 0),\r\n          logs: [\r\n            ...state.logs,\r\n            { type: 'received', msg: message, time: new Date().toISOString() },\r\n          ],\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          chattingList: [...chatList],\r\n          newMessages: chatList.reduce((a, c) => (a += c.new_messages), 0),\r\n        };\r\n      }\r\n    },\r\n    [OPEN_CHATTING]: (state) => ({ ...state, chat: true }),\r\n    [CLOSE_CHATTING]: (state) => ({\r\n      ...state,\r\n      chat: false,\r\n      other: null,\r\n      logs: [],\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_SUCCESS]: (state, { payload: list }) => ({\r\n      ...state,\r\n      logs: [...list],\r\n      loading: false,\r\n    }),\r\n    [REQUEST_CHATTING_LOGS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [REQUEST_CHATTING_LIST_SUCCESS]: (state, { payload: list }) => ({\r\n      ...state,\r\n      chattingList: [...list],\r\n      newMessages: list.reduce((a, c) => (a += c.new_messages), 0),\r\n    }),\r\n    [REQUEST_CHATTING_LIST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [START_LOADING]: (state) => ({\r\n      ...state,\r\n      loading: true,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}