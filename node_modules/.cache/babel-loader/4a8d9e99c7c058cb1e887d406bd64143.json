{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\Friends\\\\RecommendContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport RecommendList from '../../components/Friends/RecommendList';\nimport { getRecommend, friendRequest } from '../../modules/friends';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecommendContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    uid,\n    recommendList,\n    tags\n  } = useSelector(_ref => {\n    let {\n      user,\n      friends: {\n        recommendList,\n        tagList\n      }\n    } = _ref;\n    return {\n      recommendList,\n      tags: tagList,\n      uid: user.user.uid\n    };\n  });\n  useEffect(() => {\n    dispatch(getRecommend({\n      filter: tags,\n      uid\n    }));\n  }, [dispatch, tags, uid]);\n\n  const onRefresh = () => {\n    dispatch(getRecommend({\n      filter: tags,\n      uid\n    }));\n  };\n\n  const requestFriendEnrollment = receiver => {\n    const sender = JSON.parse(localStorage.user);\n    receiver.type = 'sendered';\n    dispatch(friendRequest({\n      sender,\n      receiver\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(RecommendList, {\n    friendRequest: requestFriendEnrollment,\n    recommendList: recommendList,\n    onRefresh: onRefresh\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecommendContainer, \"YrjnAvESlGNP7sMQTz0pb/ZH5AU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RecommendContainer;\nexport default RecommendContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecommendContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/Friends/RecommendContainer.js"],"names":["React","useEffect","useDispatch","useSelector","RecommendList","getRecommend","friendRequest","RecommendContainer","dispatch","uid","recommendList","tags","user","friends","tagList","filter","onRefresh","requestFriendEnrollment","receiver","sender","JSON","parse","localStorage","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,uBAA5C;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA,GAAF;AAAOC,IAAAA,aAAP;AAAsBC,IAAAA;AAAtB,MAA+BR,WAAW,CAC9C;AAAA,QAAC;AAAES,MAAAA,IAAF;AAAQC,MAAAA,OAAO,EAAE;AAAEH,QAAAA,aAAF;AAAiBI,QAAAA;AAAjB;AAAjB,KAAD;AAAA,WAAoD;AAClDJ,MAAAA,aADkD;AAElDC,MAAAA,IAAI,EAAEG,OAF4C;AAGlDL,MAAAA,GAAG,EAAEG,IAAI,CAACA,IAAL,CAAUH;AAHmC,KAApD;AAAA,GAD8C,CAAhD;AAOAR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACH,YAAY,CAAC;AAAEU,MAAAA,MAAM,EAAEJ,IAAV;AAAgBF,MAAAA;AAAhB,KAAD,CAAb,CAAR;AACD,GAFQ,EAEN,CAACD,QAAD,EAAWG,IAAX,EAAiBF,GAAjB,CAFM,CAAT;;AAIA,QAAMO,SAAS,GAAG,MAAM;AACtBR,IAAAA,QAAQ,CAACH,YAAY,CAAC;AAAEU,MAAAA,MAAM,EAAEJ,IAAV;AAAgBF,MAAAA;AAAhB,KAAD,CAAb,CAAR;AACD,GAFD;;AAGA,QAAMQ,uBAAuB,GAAIC,QAAD,IAAc;AAC5C,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACV,IAAxB,CAAf;AACAM,IAAAA,QAAQ,CAACK,IAAT,GAAgB,UAAhB;AACAf,IAAAA,QAAQ,CAACF,aAAa,CAAC;AAAEa,MAAAA,MAAF;AAAUD,MAAAA;AAAV,KAAD,CAAd,CAAR;AACD,GAJD;;AAKA,sBACE,QAAC,aAAD;AACE,IAAA,aAAa,EAAED,uBADjB;AAEE,IAAA,aAAa,EAAEP,aAFjB;AAGE,IAAA,SAAS,EAAEM;AAHb;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA5BD;;GAAMT,kB;UACaL,W,EACoBC,W;;;KAFjCI,kB;AA8BN,eAAeA,kBAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport RecommendList from '../../components/Friends/RecommendList';\r\nimport { getRecommend, friendRequest } from '../../modules/friends';\r\n\r\nconst RecommendContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { uid, recommendList, tags } = useSelector(\r\n    ({ user, friends: { recommendList, tagList } }) => ({\r\n      recommendList,\r\n      tags: tagList,\r\n      uid: user.user.uid,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getRecommend({ filter: tags, uid }));\r\n  }, [dispatch, tags, uid]);\r\n\r\n  const onRefresh = () => {\r\n    dispatch(getRecommend({ filter: tags, uid }));\r\n  };\r\n  const requestFriendEnrollment = (receiver) => {\r\n    const sender = JSON.parse(localStorage.user);\r\n    receiver.type = 'sendered';\r\n    dispatch(friendRequest({ sender, receiver }));\r\n  };\r\n  return (\r\n    <RecommendList\r\n      friendRequest={requestFriendEnrollment}\r\n      recommendList={recommendList}\r\n      onRefresh={onRefresh}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RecommendContainer;\r\n"]},"metadata":{},"sourceType":"module"}