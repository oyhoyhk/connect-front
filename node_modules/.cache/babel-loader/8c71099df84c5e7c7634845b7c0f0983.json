{"ast":null,"code":"import React,{useEffect,useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import ChattingModal from'../../components/ChattingModal/ChattingModal';import{requestChattingList}from'../../modules/chatting';import{closeChat,closeChatting,initializeOther}from'../../modules/chatting';import{jsx as _jsx}from\"react/jsx-runtime\";var ChattingModalContainer=function ChattingModalContainer(){var changeScroll=useCallback(function(e){e.scrollTop=e.scrollHeight;},[]);var _useSelector=useSelector(function(_ref){var _ref$chatting=_ref.chatting,loading=_ref$chatting.loading,other=_ref$chatting.other,logs=_ref$chatting.logs;return{other:other,logs:logs,loading:loading};}),other=_useSelector.other,loading=_useSelector.loading,logs=_useSelector.logs;var dispatch=useDispatch();var exitChatting=function exitChatting(e){e.stopPropagation();var _JSON$parse=JSON.parse(localStorage.user),uid=_JSON$parse.uid;dispatch(closeChat({sender:uid,receiver:other.receiver}));dispatch(closeChatting());dispatch(requestChattingList({uid:uid}));};useEffect(function(){return function(){dispatch(initializeOther());};},[dispatch]);return/*#__PURE__*/_jsx(ChattingModal,{loading:loading,exitChatting:exitChatting,other:other,changeScroll:changeScroll,logs:logs});};export default ChattingModalContainer;","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/ChattingModal/ChattingModalContainer.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","ChattingModal","requestChattingList","closeChat","closeChatting","initializeOther","ChattingModalContainer","changeScroll","e","scrollTop","scrollHeight","chatting","loading","other","logs","dispatch","exitChatting","stopPropagation","JSON","parse","localStorage","user","uid","sender","receiver"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,WAA3B,KAA8C,OAA9C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAOC,CAAAA,aAAP,KAA0B,8CAA1B,CACA,OAASC,mBAAT,KAAoC,wBAApC,CACA,OACEC,SADF,CAEEC,aAFF,CAGEC,eAHF,KAIO,wBAJP,C,2CAMA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,GAAMC,CAAAA,YAAY,CAAGT,WAAW,CAAC,SAACU,CAAD,CAAO,CACtCA,CAAC,CAACC,SAAF,CAAcD,CAAC,CAACE,YAAhB,CACD,CAF+B,CAE7B,EAF6B,CAAhC,CAGA,iBAAiCV,WAAW,CAC1C,sCAAGW,QAAH,CAAeC,OAAf,eAAeA,OAAf,CAAwBC,KAAxB,eAAwBA,KAAxB,CAA+BC,IAA/B,eAA+BA,IAA/B,OAA6C,CAC3CD,KAAK,CAALA,KAD2C,CAE3CC,IAAI,CAAJA,IAF2C,CAG3CF,OAAO,CAAPA,OAH2C,CAA7C,EAD0C,CAA5C,CAAQC,KAAR,cAAQA,KAAR,CAAeD,OAAf,cAAeA,OAAf,CAAwBE,IAAxB,cAAwBA,IAAxB,CAOA,GAAMC,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CACA,GAAMiB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACR,CAAD,CAAO,CAC1BA,CAAC,CAACS,eAAF,GACA,gBAAgBC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,IAAxB,CAAhB,CAAQC,GAAR,aAAQA,GAAR,CACAP,QAAQ,CAACZ,SAAS,CAAC,CAAEoB,MAAM,CAAED,GAAV,CAAeE,QAAQ,CAAEX,KAAK,CAACW,QAA/B,CAAD,CAAV,CAAR,CACAT,QAAQ,CAACX,aAAa,EAAd,CAAR,CACAW,QAAQ,CAACb,mBAAmB,CAAC,CAAEoB,GAAG,CAAHA,GAAF,CAAD,CAApB,CAAR,CACD,CAND,CAOAzB,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACXkB,QAAQ,CAACV,eAAe,EAAhB,CAAR,CACD,CAFD,CAGD,CAJQ,CAIN,CAACU,QAAD,CAJM,CAAT,CAKA,mBACE,KAAC,aAAD,EACE,OAAO,CAAEH,OADX,CAEE,YAAY,CAAEI,YAFhB,CAGE,KAAK,CAAEH,KAHT,CAIE,YAAY,CAAEN,YAJhB,CAKE,IAAI,CAAEO,IALR,EADF,CASD,CAjCD,CAmCA,cAAeR,CAAAA,sBAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ChattingModal from '../../components/ChattingModal/ChattingModal';\r\nimport { requestChattingList } from '../../modules/chatting';\r\nimport {\r\n  closeChat,\r\n  closeChatting,\r\n  initializeOther,\r\n} from '../../modules/chatting';\r\n\r\nconst ChattingModalContainer = () => {\r\n  const changeScroll = useCallback((e) => {\r\n    e.scrollTop = e.scrollHeight;\r\n  }, []);\r\n  const { other, loading, logs } = useSelector(\r\n    ({ chatting: { loading, other, logs } }) => ({\r\n      other,\r\n      logs,\r\n      loading,\r\n    }),\r\n  );\r\n  const dispatch = useDispatch();\r\n  const exitChatting = (e) => {\r\n    e.stopPropagation();\r\n    const { uid } = JSON.parse(localStorage.user);\r\n    dispatch(closeChat({ sender: uid, receiver: other.receiver }));\r\n    dispatch(closeChatting());\r\n    dispatch(requestChattingList({ uid }));\r\n  };\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initializeOther());\r\n    };\r\n  }, [dispatch]);\r\n  return (\r\n    <ChattingModal\r\n      loading={loading}\r\n      exitChatting={exitChatting}\r\n      other={other}\r\n      changeScroll={changeScroll}\r\n      logs={logs}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChattingModalContainer;\r\n"]},"metadata":{},"sourceType":"module"}