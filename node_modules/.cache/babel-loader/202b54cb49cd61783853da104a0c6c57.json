{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\auth\\\\ProfileSettingContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ProfileSettingForm from '../../components/auth/ProfileSettingForm';\nimport { initializeForm, setTempInfo } from '../../modules/auth';\nimport imageCompression from '../../../node_modules/browser-image-compression/dist/browser-image-compression';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileSettingContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    username,\n    password\n  } = useSelector(_ref => {\n    let {\n      auth: {\n        tempInfo\n      }\n    } = _ref;\n    return {\n      username: tempInfo.username,\n      password: tempInfo.password,\n      nickname: tempInfo.nickname,\n      profileImage: tempInfo.profileImage\n    };\n  });\n\n  const imageCompress = fileSrc => {\n    const options = {\n      maxSizeMB: 0.2,\n      maxWidthOrHeight: 380,\n      userWebWorker: true\n    };\n    return imageCompression(fileSrc, options);\n  };\n\n  const onChange = (e, ref) => {\n    if (e.target.files) {\n      const reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n\n      reader.onload = event => {\n        ref.style.backgroundImage = `url(${event.target.result})`;\n      };\n\n      imageCompress(e.target.files[0]).then(res => {\n        dispatch(setTempInfo({\n          type: 'profileImage',\n          value: res\n        }));\n      });\n    } else {\n      console.log('아이디');\n    }\n  };\n\n  console.log(username, password);\n  useEffect(() => {\n    dispatch(initializeForm({\n      username,\n      password\n    }));\n  }, [dispatch, password, username]);\n  return /*#__PURE__*/_jsxDEV(ProfileSettingForm, {\n    onChange: onChange,\n    username: username\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ProfileSettingContainer, \"9ho6otzVqTI0Ki4JvdyEeCF2b0M=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ProfileSettingContainer;\nexport default ProfileSettingContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileSettingContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/auth/ProfileSettingContainer.js"],"names":["React","useEffect","useDispatch","useSelector","ProfileSettingForm","initializeForm","setTempInfo","imageCompression","ProfileSettingContainer","dispatch","username","password","auth","tempInfo","nickname","profileImage","imageCompress","fileSrc","options","maxSizeMB","maxWidthOrHeight","userWebWorker","onChange","e","ref","target","files","reader","FileReader","readAsDataURL","onload","event","style","backgroundImage","result","then","res","type","value","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,oBAA5C;AACA,OAAOC,gBAAP,MAA6B,gFAA7B;;;AACA,MAAMC,uBAAuB,GAAG,MAAM;AAAA;;AACpC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBR,WAAW,CAAC;AAAA,QAAC;AAAES,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR,KAAD;AAAA,WAA6B;AACtEH,MAAAA,QAAQ,EAAEG,QAAQ,CAACH,QADmD;AAEtEC,MAAAA,QAAQ,EAAEE,QAAQ,CAACF,QAFmD;AAGtEG,MAAAA,QAAQ,EAAED,QAAQ,CAACC,QAHmD;AAItEC,MAAAA,YAAY,EAAEF,QAAQ,CAACE;AAJ+C,KAA7B;AAAA,GAAD,CAA1C;;AAMA,QAAMC,aAAa,GAAIC,OAAD,IAAa;AACjC,UAAMC,OAAO,GAAG;AACdC,MAAAA,SAAS,EAAE,GADG;AAEdC,MAAAA,gBAAgB,EAAE,GAFJ;AAGdC,MAAAA,aAAa,EAAE;AAHD,KAAhB;AAKA,WAAOd,gBAAgB,CAACU,OAAD,EAAUC,OAAV,CAAvB;AACD,GAPD;;AAQA,QAAMI,QAAQ,GAAG,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC3B,QAAID,CAAC,CAACE,MAAF,CAASC,KAAb,EAAoB;AAClB,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBN,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB;;AACAC,MAAAA,MAAM,CAACG,MAAP,GAAiBC,KAAD,IAAW;AACzBP,QAAAA,GAAG,CAACQ,KAAJ,CAAUC,eAAV,GAA6B,OAAMF,KAAK,CAACN,MAAN,CAAaS,MAAO,GAAvD;AACD,OAFD;;AAGAlB,MAAAA,aAAa,CAACO,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAAb,CAAiCS,IAAjC,CAAuCC,GAAD,IAAS;AAC7C3B,QAAAA,QAAQ,CAACH,WAAW,CAAC;AAAE+B,UAAAA,IAAI,EAAE,cAAR;AAAwBC,UAAAA,KAAK,EAAEF;AAA/B,SAAD,CAAZ,CAAR;AACD,OAFD;AAGD,KATD,MASO;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;AACF,GAbD;;AAcAD,EAAAA,OAAO,CAACC,GAAR,CAAY9B,QAAZ,EAAsBC,QAAtB;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACJ,cAAc,CAAC;AAAEK,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,CAAf,CAAR;AACD,GAFQ,EAEN,CAACF,QAAD,EAAWE,QAAX,EAAqBD,QAArB,CAFM,CAAT;AAGA,sBAAO,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEY,QAA9B;AAAwC,IAAA,QAAQ,EAAEZ;AAAlD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnCD;;GAAMF,uB;UACaN,W,EACcC,W;;;KAF3BK,uB;AAqCN,eAAeA,uBAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ProfileSettingForm from '../../components/auth/ProfileSettingForm';\r\nimport { initializeForm, setTempInfo } from '../../modules/auth';\r\nimport imageCompression from '../../../node_modules/browser-image-compression/dist/browser-image-compression';\r\nconst ProfileSettingContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { username, password } = useSelector(({ auth: { tempInfo } }) => ({\r\n    username: tempInfo.username,\r\n    password: tempInfo.password,\r\n    nickname: tempInfo.nickname,\r\n    profileImage: tempInfo.profileImage,\r\n  }));\r\n  const imageCompress = (fileSrc) => {\r\n    const options = {\r\n      maxSizeMB: 0.2,\r\n      maxWidthOrHeight: 380,\r\n      userWebWorker: true,\r\n    };\r\n    return imageCompression(fileSrc, options);\r\n  };\r\n  const onChange = (e, ref) => {\r\n    if (e.target.files) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(e.target.files[0]);\r\n      reader.onload = (event) => {\r\n        ref.style.backgroundImage = `url(${event.target.result})`;\r\n      };\r\n      imageCompress(e.target.files[0]).then((res) => {\r\n        dispatch(setTempInfo({ type: 'profileImage', value: res }));\r\n      });\r\n    } else {\r\n      console.log('아이디');\r\n    }\r\n  };\r\n  console.log(username, password);\r\n  useEffect(() => {\r\n    dispatch(initializeForm({ username, password }));\r\n  }, [dispatch, password, username]);\r\n  return <ProfileSettingForm onChange={onChange} username={username} />;\r\n};\r\n\r\nexport default ProfileSettingContainer;\r\n"]},"metadata":{},"sourceType":"module"}