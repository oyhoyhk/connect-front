{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\common\\\\ChatHallContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ChatHall from '../../components/common/ChatHall';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { socket } from '../../lib/sockets/chatHallSocket';\nimport { getGuestNumber, sendMessage, receiveMessage, setUserList, getUserInfo, setChatHall, leaveChatHall, someoneLeft, someoneInOut, initializeChatHall } from '../../modules/chatHall';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatHallContainer = () => {\n  _s();\n\n  const [msg, setMsg] = useState('');\n  const [load, setLoad] = useState(false);\n  const [count, setCount] = useState(1);\n  const dispatch = useDispatch();\n  const {\n    user,\n    userList,\n    msgList,\n    userInfo\n  } = useSelector(_ref => {\n    let {\n      chatHall,\n      user: {\n        user\n      }\n    } = _ref;\n    return {\n      user: chatHall.user,\n      userList: chatHall.userList,\n      msgList: chatHall.msgList,\n      userInfo: user\n    };\n  });\n  useEffect(() => {\n    console.log(count);\n    setCount(count + 1);\n\n    if ((userInfo || user) && !load) {\n      if (userInfo) {\n        dispatch(setChatHall(userInfo));\n        setLoad(true);\n        socket.emit('enter', {\n          username: userInfo.username,\n          nickname: userInfo.nickname,\n          profileImage: userInfo.profileImage\n        }, response => {\n          if (response === 'success') {\n            localStorage.setItem('chatHall', JSON.stringify(userInfo));\n          }\n        });\n      } else {\n        dispatch(setChatHall(user));\n        setLoad(true);\n        socket.emit('enter', {\n          username: user.username,\n          nickname: user.nickname,\n          profileImage: user.profileImage\n        }, response => {\n          if (response === 'success') {\n            localStorage.setItem('chatHall', JSON.stringify(user));\n          }\n        });\n      }\n    } else {\n      dispatch(getGuestNumber());\n    }\n\n    if (user) {\n      console.log(user);\n      socket.emit('enter', {\n        username: user.username,\n        nickname: user.nickname,\n        profileImage: user.profileImage\n      }, response => {\n        if (response === 'success') {\n          localStorage.setItem('chatHall', JSON.stringify(user));\n        }\n      });\n    } // const onBeforeUnload = (e) => {\n    //   dispatch(leaveChatHall({ username: user.username }));\n    //   localStorage.removeItem('chatHall');\n    // };\n    // window.addEventListener('beforeunload', onBeforeUnload);\n\n\n    socket.on('broadcastMsg', data => {\n      dispatch(receiveMessage({\n        received: true,\n        ...data\n      }));\n    });\n    socket.on('someone_entered', data => {\n      dispatch(setUserList(data));\n      dispatch(someoneInOut({\n        action: 'in',\n        nickname: data[data.length - 1].nickname\n      }));\n    });\n    socket.on('someone_left', data => {\n      console.log('someone_left, data : ', data);\n      dispatch(someoneLeft(data));\n      dispatch(someoneInOut({\n        action: 'out',\n        nickname: data\n      }));\n    });\n    return () => {\n      if (localStorage.chatHall) {\n        const {\n          username\n        } = JSON.parse(localStorage.chatHall);\n        localStorage.removeItem('chatHall');\n        socket.removeAllListeners();\n        dispatch(leaveChatHall({\n          username\n        }));\n        dispatch(initializeChatHall());\n      }\n    };\n  }, [dispatch, load, user, userInfo]);\n\n  const onChange = e => {\n    setMsg(e.target.value);\n  };\n\n  const changeScroll = useCallback(e => {\n    e.scrollTop = e.scrollHeight;\n  }, []);\n\n  const onSubmit = () => {\n    if (msg === '') return;\n    socket.emit('msg', {\n      nickname: user.nickname,\n      msg: msg.trim()\n    });\n    dispatch(sendMessage({\n      send: true,\n      nickname: user.nickname,\n      msg: msg.trim()\n    }));\n    setMsg('');\n  };\n\n  const onKeySubmit = e => {\n    if (e.key === 'Enter') {\n      onSubmit();\n      setMsg('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChatHall, {\n    changeScroll: changeScroll,\n    msg: msg,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    onKeySubmit: onKeySubmit,\n    msgList: msgList,\n    userList: userList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatHallContainer, \"rM1YvOPwBCTtxTUFR18gCcsLR/E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChatHallContainer;\nexport default ChatHallContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatHallContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/common/ChatHallContainer.js"],"names":["React","useCallback","useEffect","useState","ChatHall","useDispatch","useSelector","socket","getGuestNumber","sendMessage","receiveMessage","setUserList","getUserInfo","setChatHall","leaveChatHall","someoneLeft","someoneInOut","initializeChatHall","ChatHallContainer","msg","setMsg","load","setLoad","count","setCount","dispatch","user","userList","msgList","userInfo","chatHall","console","log","emit","username","nickname","profileImage","response","localStorage","setItem","JSON","stringify","on","data","received","action","length","parse","removeItem","removeAllListeners","onChange","e","target","value","changeScroll","scrollTop","scrollHeight","onSubmit","trim","send","onKeySubmit","key"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport ChatHall from '../../components/common/ChatHall';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { socket } from '../../lib/sockets/chatHallSocket';\r\nimport {\r\n  getGuestNumber,\r\n  sendMessage,\r\n  receiveMessage,\r\n  setUserList,\r\n  getUserInfo,\r\n  setChatHall,\r\n  leaveChatHall,\r\n  someoneLeft,\r\n  someoneInOut,\r\n  initializeChatHall,\r\n} from '../../modules/chatHall';\r\n\r\nconst ChatHallContainer = () => {\r\n  const [msg, setMsg] = useState('');\r\n  const [load, setLoad] = useState(false);\r\n  const [count, setCount] = useState(1);\r\n  const dispatch = useDispatch();\r\n\r\n  const { user, userList, msgList, userInfo } = useSelector(\r\n    ({ chatHall, user: { user } }) => ({\r\n      user: chatHall.user,\r\n      userList: chatHall.userList,\r\n      msgList: chatHall.msgList,\r\n      userInfo: user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    console.log(count);\r\n    setCount(count + 1);\r\n    if ((userInfo || user) && !load) {\r\n      if (userInfo) {\r\n        dispatch(setChatHall(userInfo));\r\n        setLoad(true);\r\n        socket.emit(\r\n          'enter',\r\n          {\r\n            username: userInfo.username,\r\n            nickname: userInfo.nickname,\r\n            profileImage: userInfo.profileImage,\r\n          },\r\n          (response) => {\r\n            if (response === 'success') {\r\n              localStorage.setItem('chatHall', JSON.stringify(userInfo));\r\n            }\r\n          },\r\n        );\r\n      } else {\r\n        dispatch(setChatHall(user));\r\n        setLoad(true);\r\n        socket.emit(\r\n          'enter',\r\n          {\r\n            username: user.username,\r\n            nickname: user.nickname,\r\n            profileImage: user.profileImage,\r\n          },\r\n          (response) => {\r\n            if (response === 'success') {\r\n              localStorage.setItem('chatHall', JSON.stringify(user));\r\n            }\r\n          },\r\n        );\r\n      }\r\n    } else {\r\n      dispatch(getGuestNumber());\r\n    }\r\n    if (user) {\r\n      console.log(user);\r\n      socket.emit(\r\n        'enter',\r\n        {\r\n          username: user.username,\r\n          nickname: user.nickname,\r\n          profileImage: user.profileImage,\r\n        },\r\n        (response) => {\r\n          if (response === 'success') {\r\n            localStorage.setItem('chatHall', JSON.stringify(user));\r\n          }\r\n        },\r\n      );\r\n    }\r\n\r\n    // const onBeforeUnload = (e) => {\r\n    //   dispatch(leaveChatHall({ username: user.username }));\r\n    //   localStorage.removeItem('chatHall');\r\n    // };\r\n    // window.addEventListener('beforeunload', onBeforeUnload);\r\n    socket.on('broadcastMsg', (data) => {\r\n      dispatch(receiveMessage({ received: true, ...data }));\r\n    });\r\n    socket.on('someone_entered', (data) => {\r\n      dispatch(setUserList(data));\r\n      dispatch(\r\n        someoneInOut({\r\n          action: 'in',\r\n          nickname: data[data.length - 1].nickname,\r\n        }),\r\n      );\r\n    });\r\n    socket.on('someone_left', (data) => {\r\n      console.log('someone_left, data : ', data);\r\n      dispatch(someoneLeft(data));\r\n      dispatch(someoneInOut({ action: 'out', nickname: data }));\r\n    });\r\n    return () => {\r\n      if (localStorage.chatHall) {\r\n        const { username } = JSON.parse(localStorage.chatHall);\r\n        localStorage.removeItem('chatHall');\r\n        socket.removeAllListeners();\r\n        dispatch(leaveChatHall({ username }));\r\n        dispatch(initializeChatHall());\r\n      }\r\n    };\r\n  }, [dispatch, load, user, userInfo]);\r\n\r\n  const onChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const changeScroll = useCallback((e) => {\r\n    e.scrollTop = e.scrollHeight;\r\n  }, []);\r\n\r\n  const onSubmit = () => {\r\n    if (msg === '') return;\r\n    socket.emit('msg', { nickname: user.nickname, msg: msg.trim() });\r\n    dispatch(\r\n      sendMessage({ send: true, nickname: user.nickname, msg: msg.trim() }),\r\n    );\r\n    setMsg('');\r\n  };\r\n\r\n  const onKeySubmit = (e) => {\r\n    if (e.key === 'Enter') {\r\n      onSubmit();\r\n      setMsg('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatHall\r\n      changeScroll={changeScroll}\r\n      msg={msg}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      onKeySubmit={onKeySubmit}\r\n      msgList={msgList}\r\n      userList={userList}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ChatHallContainer;\r\n"]},"metadata":{},"sourceType":"module"}