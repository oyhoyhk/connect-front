{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as friendsAPI from '../lib/api/friends';\nconst [LOAD_FRIENDS_LIST, LOAD_FRIENDS_LIST_SUCCESS, LOAD_FRIENDS_LIST_FAILURE] = createRequestActionTypes('friends/SET_FRIENDS');\nconst [LOAD_TAGS, LOAD_TAGS_SUCCESS, LOAD_TAGS_FAILURE] = createRequestActionTypes('friends/SET_TAGS');\nconst [ADD_TAG, ADD_TAG_SUCCESS, ADD_TAG_FAILURE] = createRequestActionTypes('friends/ADD_TAG');\nexport const loadTags = createAction(LOAD_TAGS);\nexport const addTag = createAction(ADD_TAG);\nconst loadFriendsListSaga = createRequestSaga(LOAD_FRIENDS_LIST);\nconst loadTagsSaga = createRequestSaga(LOAD_TAGS, friendsAPI.loadTags);\nconst addTagSaga = createRequestSaga(ADD_TAG, friendsAPI.addTag);\nexport function* friendsSaga() {\n  yield takeLatest(LOAD_FRIENDS_LIST, loadFriendsListSaga);\n  yield takeLatest(LOAD_TAGS, loadTagsSaga);\n  yield takeLatest(ADD_TAG, addTagSaga);\n}\nconst initialState = {\n  friendsList: [],\n  tagList: '',\n  error: null\n};\nexport default handleActions({\n  [LOAD_TAGS_SUCCESS]: (state, _ref) => {\n    let {\n      payload: tags\n    } = _ref;\n    return { ...state,\n      tagList: tags\n    };\n  },\n  [LOAD_TAGS_FAILURE]: (state, _ref2) => {\n    let {\n      payload: error\n    } = _ref2;\n    return { ...state,\n      error\n    };\n  },\n  [LOAD_FRIENDS_LIST_SUCCESS]: (state, _ref3) => {\n    let {\n      payload: friendsList\n    } = _ref3;\n    return { ...state,\n      friendsList: [...friendsList]\n    };\n  },\n  [LOAD_FRIENDS_LIST_FAILURE]: (state, _ref4) => {\n    let {\n      payload: error\n    } = _ref4;\n    return { ...state,\n      error\n    };\n  },\n  [ADD_TAG_SUCCESS]: state => ({ ...state\n  }),\n  [ADD_TAG_FAILURE]: (state, _ref5) => {\n    let {\n      payload: error\n    } = _ref5;\n    return { ...state,\n      error\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/friends.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","friendsAPI","LOAD_FRIENDS_LIST","LOAD_FRIENDS_LIST_SUCCESS","LOAD_FRIENDS_LIST_FAILURE","LOAD_TAGS","LOAD_TAGS_SUCCESS","LOAD_TAGS_FAILURE","ADD_TAG","ADD_TAG_SUCCESS","ADD_TAG_FAILURE","loadTags","addTag","loadFriendsListSaga","loadTagsSaga","addTagSaga","friendsSaga","initialState","friendsList","tagList","error","state","payload","tags"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,UAAZ,MAA4B,oBAA5B;AAEA,MAAM,CACJC,iBADI,EAEJC,yBAFI,EAGJC,yBAHI,IAIFJ,wBAAwB,CAAC,qBAAD,CAJ5B;AAKA,MAAM,CAACK,SAAD,EAAYC,iBAAZ,EAA+BC,iBAA/B,IACJP,wBAAwB,CAAC,kBAAD,CAD1B;AAEA,MAAM,CAACQ,OAAD,EAAUC,eAAV,EAA2BC,eAA3B,IACJV,wBAAwB,CAAC,iBAAD,CAD1B;AAGA,OAAO,MAAMW,QAAQ,GAAGf,YAAY,CAACS,SAAD,CAA7B;AACP,OAAO,MAAMO,MAAM,GAAGhB,YAAY,CAACY,OAAD,CAA3B;AAEP,MAAMK,mBAAmB,GAAGd,iBAAiB,CAACG,iBAAD,CAA7C;AACA,MAAMY,YAAY,GAAGf,iBAAiB,CAACM,SAAD,EAAYJ,UAAU,CAACU,QAAvB,CAAtC;AACA,MAAMI,UAAU,GAAGhB,iBAAiB,CAACS,OAAD,EAAUP,UAAU,CAACW,MAArB,CAApC;AAEA,OAAO,UAAUI,WAAV,GAAwB;AAC7B,QAAMlB,UAAU,CAACI,iBAAD,EAAoBW,mBAApB,CAAhB;AACA,QAAMf,UAAU,CAACO,SAAD,EAAYS,YAAZ,CAAhB;AACA,QAAMhB,UAAU,CAACU,OAAD,EAAUO,UAAV,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAevB,aAAa,CAC1B;AACE,GAACS,iBAAD,GAAqB,CAACe,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEC;AAAX,KAAR;AAAA,WAA+B,EAClD,GAAGF,KAD+C;AAElDF,MAAAA,OAAO,EAAEI;AAFyC,KAA/B;AAAA,GADvB;AAKE,GAAChB,iBAAD,GAAqB,CAACc,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEF;AAAX,KAAR;AAAA,WAAgC,EACnD,GAAGC,KADgD;AAEnDD,MAAAA;AAFmD,KAAhC;AAAA,GALvB;AASE,GAACjB,yBAAD,GAA6B,CAACkB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEJ;AAAX,KAAR;AAAA,WAAsC,EACjE,GAAGG,KAD8D;AAEjEH,MAAAA,WAAW,EAAE,CAAC,GAAGA,WAAJ;AAFoD,KAAtC;AAAA,GAT/B;AAaE,GAACd,yBAAD,GAA6B,CAACiB,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEF;AAAX,KAAR;AAAA,WAAgC,EAC3D,GAAGC,KADwD;AAE3DD,MAAAA;AAF2D,KAAhC;AAAA,GAb/B;AAiBE,GAACX,eAAD,GAAoBY,KAAD,KAAY,EAC7B,GAAGA;AAD0B,GAAZ,CAjBrB;AAoBE,GAACX,eAAD,GAAmB,CAACW,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEF;AAAX,KAAR;AAAA,WAAgC,EACjD,GAAGC,KAD8C;AAEjDD,MAAAA;AAFiD,KAAhC;AAAA;AApBrB,CAD0B,EA0B1BH,YA1B0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as friendsAPI from '../lib/api/friends';\r\n\r\nconst [\r\n  LOAD_FRIENDS_LIST,\r\n  LOAD_FRIENDS_LIST_SUCCESS,\r\n  LOAD_FRIENDS_LIST_FAILURE,\r\n] = createRequestActionTypes('friends/SET_FRIENDS');\r\nconst [LOAD_TAGS, LOAD_TAGS_SUCCESS, LOAD_TAGS_FAILURE] =\r\n  createRequestActionTypes('friends/SET_TAGS');\r\nconst [ADD_TAG, ADD_TAG_SUCCESS, ADD_TAG_FAILURE] =\r\n  createRequestActionTypes('friends/ADD_TAG');\r\n\r\nexport const loadTags = createAction(LOAD_TAGS);\r\nexport const addTag = createAction(ADD_TAG);\r\n\r\nconst loadFriendsListSaga = createRequestSaga(LOAD_FRIENDS_LIST);\r\nconst loadTagsSaga = createRequestSaga(LOAD_TAGS, friendsAPI.loadTags);\r\nconst addTagSaga = createRequestSaga(ADD_TAG, friendsAPI.addTag);\r\n\r\nexport function* friendsSaga() {\r\n  yield takeLatest(LOAD_FRIENDS_LIST, loadFriendsListSaga);\r\n  yield takeLatest(LOAD_TAGS, loadTagsSaga);\r\n  yield takeLatest(ADD_TAG, addTagSaga);\r\n}\r\n\r\nconst initialState = {\r\n  friendsList: [],\r\n  tagList: '',\r\n  error: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [LOAD_TAGS_SUCCESS]: (state, { payload: tags }) => ({\r\n      ...state,\r\n      tagList: tags,\r\n    }),\r\n    [LOAD_TAGS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [LOAD_FRIENDS_LIST_SUCCESS]: (state, { payload: friendsList }) => ({\r\n      ...state,\r\n      friendsList: [...friendsList],\r\n    }),\r\n    [LOAD_FRIENDS_LIST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [ADD_TAG_SUCCESS]: (state) => ({\r\n      ...state,\r\n    }),\r\n    [ADD_TAG_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}