{"ast":null,"code":"var _jsxFileName = \"C:\\\\nani\\\\connect\\\\connect-frontend\\\\src\\\\containers\\\\Chatting\\\\ChattingInputContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ChattingInput from '../../components/Chatting/ChattingInput';\nimport { socket } from '../../lib/sockets/chatHallSocket';\nimport { sendChatting, setOtherToChat } from '../../modules/chatting';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChattingInputContainer = _ref => {\n  _s();\n\n  let {\n    receiver\n  } = _ref;\n  const dispatch = useDispatch();\n  const [textArea, setTextArea] = useState('');\n\n  const onPressEnter = e => {\n    if (e.key === 'Enter') {\n      onSubmit(e);\n    }\n  };\n\n  const onChange = e => {\n    setTextArea(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const sender = JSON.parse(localStorage.user).uid;\n    socket.emit('someone_send_message', {\n      sender,\n      receiver,\n      message: textArea,\n      time: new Date().toISOString()\n    });\n    dispatch(sendChatting({\n      receiver,\n      message: textArea\n    }));\n    setTextArea('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChattingInput, {\n    onSubmit: onSubmit,\n    onPressEnter: onPressEnter,\n    onChange: onChange,\n    text: textArea\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChattingInputContainer, \"rSk9oW0HNxxLjxS7Yjv79cQC4PA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ChattingInputContainer;\nexport default ChattingInputContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChattingInputContainer\");","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/containers/Chatting/ChattingInputContainer.js"],"names":["React","useState","useDispatch","ChattingInput","socket","sendChatting","setOtherToChat","ChattingInputContainer","receiver","dispatch","textArea","setTextArea","onPressEnter","e","key","onSubmit","onChange","target","value","preventDefault","sender","JSON","parse","localStorage","user","uid","emit","message","time","Date","toISOString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,wBAA7C;;;AACA,MAAMC,sBAAsB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC/C,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;;AACA,QAAMW,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBC,MAAAA,QAAQ,CAACF,CAAD,CAAR;AACD;AACF,GAJD;;AAKA,QAAMG,QAAQ,GAAIH,CAAD,IAAO;AACtBF,IAAAA,WAAW,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAGA,QAAMH,QAAQ,GAAIF,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACM,cAAF;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,IAAxB,EAA8BC,GAA7C;AACArB,IAAAA,MAAM,CAACsB,IAAP,CAAY,sBAAZ,EAAoC;AAClCN,MAAAA,MADkC;AAElCZ,MAAAA,QAFkC;AAGlCmB,MAAAA,OAAO,EAAEjB,QAHyB;AAIlCkB,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAJ4B,KAApC;AAMArB,IAAAA,QAAQ,CAACJ,YAAY,CAAC;AAAEG,MAAAA,QAAF;AAAYmB,MAAAA,OAAO,EAAEjB;AAArB,KAAD,CAAb,CAAR;AACAC,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAXD;;AAYA,sBACE,QAAC,aAAD;AACE,IAAA,QAAQ,EAAEI,QADZ;AAEE,IAAA,YAAY,EAAEH,YAFhB;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAIE,IAAA,IAAI,EAAEN;AAJR;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA/BD;;GAAMH,sB;UACaL,W;;;KADbK,sB;AAgCN,eAAeA,sBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ChattingInput from '../../components/Chatting/ChattingInput';\r\nimport { socket } from '../../lib/sockets/chatHallSocket';\r\nimport { sendChatting, setOtherToChat } from '../../modules/chatting';\r\nconst ChattingInputContainer = ({ receiver }) => {\r\n  const dispatch = useDispatch();\r\n  const [textArea, setTextArea] = useState('');\r\n  const onPressEnter = (e) => {\r\n    if (e.key === 'Enter') {\r\n      onSubmit(e);\r\n    }\r\n  };\r\n  const onChange = (e) => {\r\n    setTextArea(e.target.value);\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const sender = JSON.parse(localStorage.user).uid;\r\n    socket.emit('someone_send_message', {\r\n      sender,\r\n      receiver,\r\n      message: textArea,\r\n      time: new Date().toISOString(),\r\n    });\r\n    dispatch(sendChatting({ receiver, message: textArea }));\r\n    setTextArea('');\r\n  };\r\n  return (\r\n    <ChattingInput\r\n      onSubmit={onSubmit}\r\n      onPressEnter={onPressEnter}\r\n      onChange={onChange}\r\n      text={textArea}\r\n    />\r\n  );\r\n};\r\nexport default ChattingInputContainer;\r\n"]},"metadata":{},"sourceType":"module"}