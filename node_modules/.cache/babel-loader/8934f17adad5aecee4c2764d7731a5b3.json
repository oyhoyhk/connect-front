{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as chatHallAPI from '../lib/api/chatHall';\nconst [GET_GUEST_NUMBER, GET_GUEST_NUMBER_SUCCESS, GET_GUEST_NUMBER_FAILURE] = createRequestActionTypes('chatHall/GET_GUEST_NUMBER');\nconst [GET_USER_INFO, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAILURE] = createRequestActionTypes('chatHall/GET_USER_INFO');\nconst [LEAVE_CHAT_HALL, LEAVE_CHAT_HALL_SUCCESS, LEAVE_CHAT_HALL_FAILURE] = createRequestActionTypes('chatHall/LEAVE_CHAT_HALL');\nconst SET_CHAT_HALL = 'chatHall/SET_CHAT_HALL';\nconst SEND_MESSAGE = 'chatHall/SEND_MESSAGE';\nconst RECEIVE_MESSAGE = 'chatHall/RECEIVE_MESSAGE';\nconst SET_USER_LIST = 'chatHall/SET_USER_LIST';\nconst SOMEONE_LEFT = 'chatHall/SOMEHONE_LEFT';\nconst SOMEONE_IN_OUT = 'chatHall/SOMEONE_IN_OUT';\nexport const getGuestNumber = createAction(GET_GUEST_NUMBER);\nexport const setChatHall = createAction(SET_CHAT_HALL);\nexport const sendMessage = createAction(SEND_MESSAGE);\nexport const receiveMessage = createAction(RECEIVE_MESSAGE);\nexport const setUserList = createAction(SET_USER_LIST);\nexport const getUserInfo = createAction(GET_USER_INFO);\nexport const leaveChatHall = createAction(LEAVE_CHAT_HALL);\nexport const someoneLeft = createAction(SOMEONE_LEFT);\nexport const someoneInOut = createAction(SOMEONE_IN_OUT);\nconst getGuestNumberSaga = createRequestSaga(GET_GUEST_NUMBER, chatHallAPI.guestNumber);\nconst getUserInfoSaga = createRequestSaga(GET_USER_INFO, chatHallAPI.userInfo);\nconst leaveChatHallSaga = createRequestSaga(LEAVE_CHAT_HALL, chatHallAPI.leaveChatHall);\nexport function* chatHallSaga() {\n  yield takeLatest(GET_GUEST_NUMBER, getGuestNumberSaga);\n  yield takeLatest(GET_USER_INFO, getUserInfoSaga);\n  yield takeLatest(LEAVE_CHAT_HALL, leaveChatHallSaga);\n}\nconst initialState = {\n  user: null,\n  userList: [],\n  msgList: [],\n  error: null\n};\nexport default handleActions({\n  [SET_CHAT_HALL]: (state, _ref) => {\n    let {\n      payload: user\n    } = _ref;\n    return { ...state,\n      user: {\n        username: user.username,\n        nickname: user.nickname,\n        profileImage: user.profileImage\n      }\n    };\n  },\n  [GET_GUEST_NUMBER_SUCCESS]: (state, _ref2) => {\n    let {\n      payload: guestInfo\n    } = _ref2;\n    return { ...state,\n      user: {\n        username: guestInfo,\n        nickname: guestInfo,\n        profileImage: null\n      }\n    };\n  },\n  [GET_GUEST_NUMBER_FAILURE]: (state, _ref3) => {\n    let {\n      payload: error\n    } = _ref3;\n    return { ...state,\n      user: null,\n      error: error\n    };\n  },\n  [SEND_MESSAGE]: (state, _ref4) => {\n    let {\n      payload: msg\n    } = _ref4;\n    return { ...state,\n      msgList: [...state.msgList, { ...msg\n      }]\n    };\n  },\n  [RECEIVE_MESSAGE]: (state, _ref5) => {\n    let {\n      payload: msg\n    } = _ref5;\n    return { ...state,\n      msgList: [...state.msgList, { ...msg\n      }]\n    };\n  },\n  [SET_USER_LIST]: (state, _ref6) => {\n    let {\n      payload: userList\n    } = _ref6;\n    return { ...state,\n      userList: [...userList]\n    };\n  },\n  [GET_USER_INFO_SUCCESS]: (state, _ref7) => {\n    let {\n      payload: userList\n    } = _ref7;\n    return { ...state,\n      userList: [...userList]\n    };\n  },\n  [GET_USER_INFO_FAILURE]: (state, _ref8) => {\n    let {\n      payload: error\n    } = _ref8;\n    return { ...state,\n      error: error\n    };\n  },\n  [LEAVE_CHAT_HALL_SUCCESS]: state => ({ ...state,\n    msgList: [],\n    user: null,\n    userList: null\n  }),\n  [LEAVE_CHAT_HALL_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      error\n    };\n  },\n  [SOMEONE_LEFT]: (state, _ref10) => {\n    let {\n      payload: username\n    } = _ref10;\n    return { ...state,\n      userList: state.userList.filter(user => user.username !== username)\n    };\n  },\n  [SOMEONE_IN_OUT]: (state, _ref11) => {\n    let {\n      payload: {\n        nickname,\n        action\n      }\n    } = _ref11;\n    console.log('in somone_in_out', nickname, action);\n    return { ...state,\n      msgList: [...state.msgList, {\n        action,\n        nickname\n      }]\n    };\n  }\n}, initialState);","map":{"version":3,"sources":["C:/nani/connect/connect-frontend/src/modules/chatHall.js"],"names":["createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","chatHallAPI","GET_GUEST_NUMBER","GET_GUEST_NUMBER_SUCCESS","GET_GUEST_NUMBER_FAILURE","GET_USER_INFO","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAILURE","LEAVE_CHAT_HALL","LEAVE_CHAT_HALL_SUCCESS","LEAVE_CHAT_HALL_FAILURE","SET_CHAT_HALL","SEND_MESSAGE","RECEIVE_MESSAGE","SET_USER_LIST","SOMEONE_LEFT","SOMEONE_IN_OUT","getGuestNumber","setChatHall","sendMessage","receiveMessage","setUserList","getUserInfo","leaveChatHall","someoneLeft","someoneInOut","getGuestNumberSaga","guestNumber","getUserInfoSaga","userInfo","leaveChatHallSaga","chatHallSaga","initialState","user","userList","msgList","error","state","payload","username","nickname","profileImage","guestInfo","msg","filter","action","console","log"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as chatHallAPI from '../lib/api/chatHall';\r\n\r\nconst [GET_GUEST_NUMBER, GET_GUEST_NUMBER_SUCCESS, GET_GUEST_NUMBER_FAILURE] =\r\n  createRequestActionTypes('chatHall/GET_GUEST_NUMBER');\r\nconst [GET_USER_INFO, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAILURE] =\r\n  createRequestActionTypes('chatHall/GET_USER_INFO');\r\nconst [LEAVE_CHAT_HALL, LEAVE_CHAT_HALL_SUCCESS, LEAVE_CHAT_HALL_FAILURE] =\r\n  createRequestActionTypes('chatHall/LEAVE_CHAT_HALL');\r\n\r\nconst SET_CHAT_HALL = 'chatHall/SET_CHAT_HALL';\r\nconst SEND_MESSAGE = 'chatHall/SEND_MESSAGE';\r\nconst RECEIVE_MESSAGE = 'chatHall/RECEIVE_MESSAGE';\r\nconst SET_USER_LIST = 'chatHall/SET_USER_LIST';\r\nconst SOMEONE_LEFT = 'chatHall/SOMEHONE_LEFT';\r\nconst SOMEONE_IN_OUT = 'chatHall/SOMEONE_IN_OUT';\r\n\r\nexport const getGuestNumber = createAction(GET_GUEST_NUMBER);\r\nexport const setChatHall = createAction(SET_CHAT_HALL);\r\nexport const sendMessage = createAction(SEND_MESSAGE);\r\nexport const receiveMessage = createAction(RECEIVE_MESSAGE);\r\nexport const setUserList = createAction(SET_USER_LIST);\r\nexport const getUserInfo = createAction(GET_USER_INFO);\r\nexport const leaveChatHall = createAction(LEAVE_CHAT_HALL);\r\nexport const someoneLeft = createAction(SOMEONE_LEFT);\r\nexport const someoneInOut = createAction(SOMEONE_IN_OUT);\r\n\r\nconst getGuestNumberSaga = createRequestSaga(\r\n  GET_GUEST_NUMBER,\r\n  chatHallAPI.guestNumber,\r\n);\r\nconst getUserInfoSaga = createRequestSaga(GET_USER_INFO, chatHallAPI.userInfo);\r\nconst leaveChatHallSaga = createRequestSaga(\r\n  LEAVE_CHAT_HALL,\r\n  chatHallAPI.leaveChatHall,\r\n);\r\n\r\nexport function* chatHallSaga() {\r\n  yield takeLatest(GET_GUEST_NUMBER, getGuestNumberSaga);\r\n  yield takeLatest(GET_USER_INFO, getUserInfoSaga);\r\n  yield takeLatest(LEAVE_CHAT_HALL, leaveChatHallSaga);\r\n}\r\nconst initialState = {\r\n  user: null,\r\n  userList: [],\r\n  msgList: [],\r\n  error: null,\r\n};\r\nexport default handleActions(\r\n  {\r\n    [SET_CHAT_HALL]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user: {\r\n        username: user.username,\r\n        nickname: user.nickname,\r\n        profileImage: user.profileImage,\r\n      },\r\n    }),\r\n    [GET_GUEST_NUMBER_SUCCESS]: (state, { payload: guestInfo }) => ({\r\n      ...state,\r\n      user: {\r\n        username: guestInfo,\r\n        nickname: guestInfo,\r\n        profileImage: null,\r\n      },\r\n    }),\r\n    [GET_GUEST_NUMBER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      error: error,\r\n    }),\r\n    [SEND_MESSAGE]: (state, { payload: msg }) => ({\r\n      ...state,\r\n      msgList: [...state.msgList, { ...msg }],\r\n    }),\r\n    [RECEIVE_MESSAGE]: (state, { payload: msg }) => ({\r\n      ...state,\r\n      msgList: [...state.msgList, { ...msg }],\r\n    }),\r\n    [SET_USER_LIST]: (state, { payload: userList }) => ({\r\n      ...state,\r\n      userList: [...userList],\r\n    }),\r\n    [GET_USER_INFO_SUCCESS]: (state, { payload: userList }) => ({\r\n      ...state,\r\n      userList: [...userList],\r\n    }),\r\n    [GET_USER_INFO_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error: error,\r\n    }),\r\n    [LEAVE_CHAT_HALL_SUCCESS]: (state) => ({\r\n      ...state,\r\n      msgList: [],\r\n      user: null,\r\n      userList: null,\r\n    }),\r\n    [LEAVE_CHAT_HALL_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [SOMEONE_LEFT]: (state, { payload: username }) => ({\r\n      ...state,\r\n      userList: state.userList.filter((user) => user.username !== username),\r\n    }),\r\n    [SOMEONE_IN_OUT]: (state, { payload: { nickname, action } }) => {\r\n      console.log('in somone_in_out', nickname, action);\r\n      return {\r\n        ...state,\r\n        msgList: [...state.msgList, { action, nickname }],\r\n      };\r\n    },\r\n  },\r\n  initialState,\r\n);\r\n"]},"metadata":{},"sourceType":"module"}